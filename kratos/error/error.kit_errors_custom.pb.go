// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package errorpkg

import (
	errors "github.com/go-kratos/kratos/v2/errors"
	strconv "strconv"
)

var ERROR_http_code = map[string]int{

	"UNKNOWN":                            500,
	"REQUEST_FAILED":                     400,
	"RECORD_NOT_FOUND":                   404,
	"RECORD_ALREADY_EXISTS":              400,
	"NETWORK_ERROR":                      500,
	"NETWORK_TIMEOUT":                    504,
	"CONNECTION_ERROR":                   500,
	"UNINITIALIZED":                      500,
	"UNIMPLEMENTED":                      500,
	"INVALID_PARAMETER":                  400,
	"REQUEST_NOT_SUPPORT":                500,
	"INTERNAL_ERROR":                     500,
	"PANIC":                              500,
	"FATAL":                              500,
	"DUPLICATE_KEY":                      400,
	"DB":                                 500,
	"MYSQL":                              500,
	"MONGO":                              500,
	"CACHE":                              500,
	"REDIS":                              500,
	"MQ":                                 500,
	"QUEUE":                              500,
	"RABBIT_MQ":                          500,
	"KAFKA":                              500,
	"THIRD_PARTY_SERVICE_INVALID_CODE":   400,
	"THIRD_PARTY_SERVICE_INTERNAL_ERROR": 500,
	"CONTINUE":                           100,
	"SWITCHING_PROTOCOLS":                101,
	"PROCESSING":                         102,
	"EARLY_HINTS":                        103,
	"OK":                                 200,
	"CREATED":                            201,
	"ACCEPTED":                           202,
	"NON_AUTHORITATIVE_INFO":             203,
	"NO_CONTENT":                         204,
	"RESET_CONTENT":                      205,
	"PARTIAL_CONTENT":                    206,
	"MULTI_STATUS":                       207,
	"ALREADY_REPORTED":                   208,
	"I_M_USED":                           226,
	"MULTIPLE_CHOICES":                   300,
	"MOVED_PERMANENTLY":                  301,
	"FOUND":                              302,
	"SEE_OTHER":                          303,
	"NOT_MODIFIED":                       304,
	"USE_PROXY":                          305,
	"EMPTY306":                           306,
	"TEMPORARY_REDIRECT":                 307,
	"PERMANENT_REDIRECT":                 308,
	"BAD_REQUEST":                        400,
	"UNAUTHORIZED":                       401,
	"PAYMENT_REQUIRED":                   402,
	"FORBIDDEN":                          403,
	"NOT_FOUND":                          404,
	"METHOD_NOT_ALLOWED":                 405,
	"NOT_ACCEPTABLE":                     406,
	"PROXY_AUTH_REQUIRED":                407,
	"REQUEST_TIMEOUT":                    408,
	"CONFLICT":                           409,
	"GONE":                               410,
	"LENGTH_REQUIRED":                    411,
	"PRECONDITION_FAILED":                412,
	"REQUEST_ENTITY_TOO_LARGE":           413,
	"REQUEST_URI_TOO_LONG":               414,
	"UNSUPPORTED_MEDIA_TYPE":             415,
	"REQUESTED_RANGE_NOT_SATISFIABLE":    416,
	"EXPECTATION_FAILED":                 417,
	"TEAPOT":                             418,
	"MISDIRECTED_REQUEST":                421,
	"UNPROCESSABLE_ENTITY":               422,
	"LOCKED":                             423,
	"FAILED_DEPENDENCY":                  424,
	"TOO_EARLY":                          425,
	"UPGRADE_REQUIRED":                   426,
	"PRECONDITION_REQUIRED":              428,
	"TOO_MANY_REQUESTS":                  429,
	"REQUEST_HEADER_FIELDS_TOO_LARGE":    431,
	"UNAVAILABLE_FOR_LEGAL_REASONS":      451,
	"CLIENT_CLOSE":                       499,
	"INTERNAL_SERVER":                    500,
	"NOT_IMPLEMENTED":                    501,
	"BAD_GATEWAY":                        502,
	"SERVICE_UNAVAILABLE":                503,
	"GATEWAY_TIMEOUT":                    504,
	"HTTP_VERSION_NOT_SUPPORTED":         505,
	"VARIANT_ALSO_NEGOTIATES":            506,
	"INSUFFICIENT_STORAGE":               507,
	"LOOP_DETECTED":                      508,
	"NOT_EXTENDED":                       510,
	"NETWORK_AUTHENTICATION_REQUIRED":    511,
}

func (x ERROR) HTTPCode() int {
	if v, ok := ERROR_http_code[x.String()]; ok {
		return v
	}
	return 500
}

// UNKNOWN 常规
func DefaultErrorUnknown() *errors.Error {
	e := errors.New(500, ERROR_UNKNOWN.String(), "UNKNOWN 常规")
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_UNKNOWN.Number()))}
	return e
}

func DefaultErrorRequestFailed() *errors.Error {
	e := errors.New(400, ERROR_REQUEST_FAILED.String(), "")
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_REQUEST_FAILED.Number()))}
	return e
}

func DefaultErrorRecordNotFound() *errors.Error {
	e := errors.New(404, ERROR_RECORD_NOT_FOUND.String(), "")
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_RECORD_NOT_FOUND.Number()))}
	return e
}

func DefaultErrorRecordAlreadyExists() *errors.Error {
	e := errors.New(400, ERROR_RECORD_ALREADY_EXISTS.String(), "")
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_RECORD_ALREADY_EXISTS.Number()))}
	return e
}

func DefaultErrorNetworkError() *errors.Error {
	e := errors.New(500, ERROR_NETWORK_ERROR.String(), "")
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_NETWORK_ERROR.Number()))}
	return e
}

func DefaultErrorNetworkTimeout() *errors.Error {
	e := errors.New(504, ERROR_NETWORK_TIMEOUT.String(), "")
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_NETWORK_TIMEOUT.Number()))}
	return e
}

func DefaultErrorConnectionError() *errors.Error {
	e := errors.New(500, ERROR_CONNECTION_ERROR.String(), "")
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_CONNECTION_ERROR.Number()))}
	return e
}

func DefaultErrorUninitialized() *errors.Error {
	e := errors.New(500, ERROR_UNINITIALIZED.String(), "")
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_UNINITIALIZED.Number()))}
	return e
}

func DefaultErrorUnimplemented() *errors.Error {
	e := errors.New(500, ERROR_UNIMPLEMENTED.String(), "")
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_UNIMPLEMENTED.Number()))}
	return e
}

func DefaultErrorInvalidParameter() *errors.Error {
	e := errors.New(400, ERROR_INVALID_PARAMETER.String(), "")
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_INVALID_PARAMETER.Number()))}
	return e
}

func DefaultErrorRequestNotSupport() *errors.Error {
	e := errors.New(500, ERROR_REQUEST_NOT_SUPPORT.String(), "")
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_REQUEST_NOT_SUPPORT.Number()))}
	return e
}

func DefaultErrorInternalError() *errors.Error {
	e := errors.New(500, ERROR_INTERNAL_ERROR.String(), "")
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_INTERNAL_ERROR.Number()))}
	return e
}

func DefaultErrorPanic() *errors.Error {
	e := errors.New(500, ERROR_PANIC.String(), "")
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_PANIC.Number()))}
	return e
}

func DefaultErrorFatal() *errors.Error {
	e := errors.New(500, ERROR_FATAL.String(), "")
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_FATAL.Number()))}
	return e
}

func DefaultErrorDuplicateKey() *errors.Error {
	e := errors.New(400, ERROR_DUPLICATE_KEY.String(), "")
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_DUPLICATE_KEY.Number()))}
	return e
}

// DB database
func DefaultErrorDb() *errors.Error {
	e := errors.New(500, ERROR_DB.String(), "DB database")
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_DB.Number()))}
	return e
}

func DefaultErrorMysql() *errors.Error {
	e := errors.New(500, ERROR_MYSQL.String(), "")
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_MYSQL.Number()))}
	return e
}

func DefaultErrorMongo() *errors.Error {
	e := errors.New(500, ERROR_MONGO.String(), "")
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_MONGO.Number()))}
	return e
}

func DefaultErrorCache() *errors.Error {
	e := errors.New(500, ERROR_CACHE.String(), "")
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_CACHE.Number()))}
	return e
}

func DefaultErrorRedis() *errors.Error {
	e := errors.New(500, ERROR_REDIS.String(), "")
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_REDIS.Number()))}
	return e
}

// MQ message queue
func DefaultErrorMq() *errors.Error {
	e := errors.New(500, ERROR_MQ.String(), "MQ message queue")
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_MQ.Number()))}
	return e
}

func DefaultErrorQueue() *errors.Error {
	e := errors.New(500, ERROR_QUEUE.String(), "")
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_QUEUE.Number()))}
	return e
}

func DefaultErrorRabbitMq() *errors.Error {
	e := errors.New(500, ERROR_RABBIT_MQ.String(), "")
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_RABBIT_MQ.Number()))}
	return e
}

func DefaultErrorKafka() *errors.Error {
	e := errors.New(500, ERROR_KAFKA.String(), "")
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_KAFKA.Number()))}
	return e
}

// THIRD_PARTY_SERVICE_INVALID_CODE third party
func DefaultErrorThirdPartyServiceInvalidCode() *errors.Error {
	e := errors.New(400, ERROR_THIRD_PARTY_SERVICE_INVALID_CODE.String(), "THIRD_PARTY_SERVICE_INVALID_CODE third party")
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_THIRD_PARTY_SERVICE_INVALID_CODE.Number()))}
	return e
}

// 第三方服务错误
func DefaultErrorThirdPartyServiceInternalError() *errors.Error {
	e := errors.New(500, ERROR_THIRD_PARTY_SERVICE_INTERNAL_ERROR.String(), "第三方服务错误")
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_THIRD_PARTY_SERVICE_INTERNAL_ERROR.Number()))}
	return e
}

// CONTINUE Continue
func DefaultErrorContinue() *errors.Error {
	e := errors.New(100, ERROR_CONTINUE.String(), "CONTINUE Continue")
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_CONTINUE.Number()))}
	return e
}

func DefaultErrorSwitchingProtocols() *errors.Error {
	e := errors.New(101, ERROR_SWITCHING_PROTOCOLS.String(), "")
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_SWITCHING_PROTOCOLS.Number()))}
	return e
}

func DefaultErrorProcessing() *errors.Error {
	e := errors.New(102, ERROR_PROCESSING.String(), "")
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_PROCESSING.Number()))}
	return e
}

func DefaultErrorEarlyHints() *errors.Error {
	e := errors.New(103, ERROR_EARLY_HINTS.String(), "")
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_EARLY_HINTS.Number()))}
	return e
}

// OK OK
func DefaultErrorOk() *errors.Error {
	e := errors.New(200, ERROR_OK.String(), "OK OK")
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_OK.Number()))}
	return e
}

func DefaultErrorCreated() *errors.Error {
	e := errors.New(201, ERROR_CREATED.String(), "")
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_CREATED.Number()))}
	return e
}

func DefaultErrorAccepted() *errors.Error {
	e := errors.New(202, ERROR_ACCEPTED.String(), "")
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_ACCEPTED.Number()))}
	return e
}

func DefaultErrorNonAuthoritativeInfo() *errors.Error {
	e := errors.New(203, ERROR_NON_AUTHORITATIVE_INFO.String(), "")
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_NON_AUTHORITATIVE_INFO.Number()))}
	return e
}

func DefaultErrorNoContent() *errors.Error {
	e := errors.New(204, ERROR_NO_CONTENT.String(), "")
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_NO_CONTENT.Number()))}
	return e
}

func DefaultErrorResetContent() *errors.Error {
	e := errors.New(205, ERROR_RESET_CONTENT.String(), "")
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_RESET_CONTENT.Number()))}
	return e
}

func DefaultErrorPartialContent() *errors.Error {
	e := errors.New(206, ERROR_PARTIAL_CONTENT.String(), "")
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_PARTIAL_CONTENT.Number()))}
	return e
}

func DefaultErrorMultiStatus() *errors.Error {
	e := errors.New(207, ERROR_MULTI_STATUS.String(), "")
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_MULTI_STATUS.Number()))}
	return e
}

func DefaultErrorAlreadyReported() *errors.Error {
	e := errors.New(208, ERROR_ALREADY_REPORTED.String(), "")
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_ALREADY_REPORTED.Number()))}
	return e
}

func DefaultErrorIMUsed() *errors.Error {
	e := errors.New(226, ERROR_I_M_USED.String(), "")
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_I_M_USED.Number()))}
	return e
}

// MULTIPLE_CHOICES MultipleChoices
func DefaultErrorMultipleChoices() *errors.Error {
	e := errors.New(300, ERROR_MULTIPLE_CHOICES.String(), "MULTIPLE_CHOICES MultipleChoices")
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_MULTIPLE_CHOICES.Number()))}
	return e
}

func DefaultErrorMovedPermanently() *errors.Error {
	e := errors.New(301, ERROR_MOVED_PERMANENTLY.String(), "")
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_MOVED_PERMANENTLY.Number()))}
	return e
}

func DefaultErrorFound() *errors.Error {
	e := errors.New(302, ERROR_FOUND.String(), "")
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_FOUND.Number()))}
	return e
}

func DefaultErrorSeeOther() *errors.Error {
	e := errors.New(303, ERROR_SEE_OTHER.String(), "")
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_SEE_OTHER.Number()))}
	return e
}

func DefaultErrorNotModified() *errors.Error {
	e := errors.New(304, ERROR_NOT_MODIFIED.String(), "")
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_NOT_MODIFIED.Number()))}
	return e
}

func DefaultErrorUseProxy() *errors.Error {
	e := errors.New(305, ERROR_USE_PROXY.String(), "")
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_USE_PROXY.Number()))}
	return e
}

func DefaultErrorEmpty306() *errors.Error {
	e := errors.New(306, ERROR_EMPTY306.String(), "")
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_EMPTY306.Number()))}
	return e
}

func DefaultErrorTemporaryRedirect() *errors.Error {
	e := errors.New(307, ERROR_TEMPORARY_REDIRECT.String(), "")
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_TEMPORARY_REDIRECT.Number()))}
	return e
}

func DefaultErrorPermanentRedirect() *errors.Error {
	e := errors.New(308, ERROR_PERMANENT_REDIRECT.String(), "")
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_PERMANENT_REDIRECT.Number()))}
	return e
}

// BAD_REQUEST Bad Request
func DefaultErrorBadRequest() *errors.Error {
	e := errors.New(400, ERROR_BAD_REQUEST.String(), "BAD_REQUEST Bad Request")
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_BAD_REQUEST.Number()))}
	return e
}

func DefaultErrorUnauthorized() *errors.Error {
	e := errors.New(401, ERROR_UNAUTHORIZED.String(), "")
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_UNAUTHORIZED.Number()))}
	return e
}

func DefaultErrorPaymentRequired() *errors.Error {
	e := errors.New(402, ERROR_PAYMENT_REQUIRED.String(), "")
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_PAYMENT_REQUIRED.Number()))}
	return e
}

func DefaultErrorForbidden() *errors.Error {
	e := errors.New(403, ERROR_FORBIDDEN.String(), "")
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_FORBIDDEN.Number()))}
	return e
}

func DefaultErrorNotFound() *errors.Error {
	e := errors.New(404, ERROR_NOT_FOUND.String(), "")
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_NOT_FOUND.Number()))}
	return e
}

func DefaultErrorMethodNotAllowed() *errors.Error {
	e := errors.New(405, ERROR_METHOD_NOT_ALLOWED.String(), "")
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_METHOD_NOT_ALLOWED.Number()))}
	return e
}

func DefaultErrorNotAcceptable() *errors.Error {
	e := errors.New(406, ERROR_NOT_ACCEPTABLE.String(), "")
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_NOT_ACCEPTABLE.Number()))}
	return e
}

func DefaultErrorProxyAuthRequired() *errors.Error {
	e := errors.New(407, ERROR_PROXY_AUTH_REQUIRED.String(), "")
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_PROXY_AUTH_REQUIRED.Number()))}
	return e
}

func DefaultErrorRequestTimeout() *errors.Error {
	e := errors.New(408, ERROR_REQUEST_TIMEOUT.String(), "")
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_REQUEST_TIMEOUT.Number()))}
	return e
}

func DefaultErrorConflict() *errors.Error {
	e := errors.New(409, ERROR_CONFLICT.String(), "")
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_CONFLICT.Number()))}
	return e
}

func DefaultErrorGone() *errors.Error {
	e := errors.New(410, ERROR_GONE.String(), "")
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_GONE.Number()))}
	return e
}

func DefaultErrorLengthRequired() *errors.Error {
	e := errors.New(411, ERROR_LENGTH_REQUIRED.String(), "")
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_LENGTH_REQUIRED.Number()))}
	return e
}

func DefaultErrorPreconditionFailed() *errors.Error {
	e := errors.New(412, ERROR_PRECONDITION_FAILED.String(), "")
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_PRECONDITION_FAILED.Number()))}
	return e
}

func DefaultErrorRequestEntityTooLarge() *errors.Error {
	e := errors.New(413, ERROR_REQUEST_ENTITY_TOO_LARGE.String(), "")
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_REQUEST_ENTITY_TOO_LARGE.Number()))}
	return e
}

func DefaultErrorRequestUriTooLong() *errors.Error {
	e := errors.New(414, ERROR_REQUEST_URI_TOO_LONG.String(), "")
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_REQUEST_URI_TOO_LONG.Number()))}
	return e
}

func DefaultErrorUnsupportedMediaType() *errors.Error {
	e := errors.New(415, ERROR_UNSUPPORTED_MEDIA_TYPE.String(), "")
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_UNSUPPORTED_MEDIA_TYPE.Number()))}
	return e
}

func DefaultErrorRequestedRangeNotSatisfiable() *errors.Error {
	e := errors.New(416, ERROR_REQUESTED_RANGE_NOT_SATISFIABLE.String(), "")
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_REQUESTED_RANGE_NOT_SATISFIABLE.Number()))}
	return e
}

func DefaultErrorExpectationFailed() *errors.Error {
	e := errors.New(417, ERROR_EXPECTATION_FAILED.String(), "")
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_EXPECTATION_FAILED.Number()))}
	return e
}

func DefaultErrorTeapot() *errors.Error {
	e := errors.New(418, ERROR_TEAPOT.String(), "")
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_TEAPOT.Number()))}
	return e
}

func DefaultErrorMisdirectedRequest() *errors.Error {
	e := errors.New(421, ERROR_MISDIRECTED_REQUEST.String(), "")
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_MISDIRECTED_REQUEST.Number()))}
	return e
}

func DefaultErrorUnprocessableEntity() *errors.Error {
	e := errors.New(422, ERROR_UNPROCESSABLE_ENTITY.String(), "")
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_UNPROCESSABLE_ENTITY.Number()))}
	return e
}

func DefaultErrorLocked() *errors.Error {
	e := errors.New(423, ERROR_LOCKED.String(), "")
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_LOCKED.Number()))}
	return e
}

func DefaultErrorFailedDependency() *errors.Error {
	e := errors.New(424, ERROR_FAILED_DEPENDENCY.String(), "")
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_FAILED_DEPENDENCY.Number()))}
	return e
}

func DefaultErrorTooEarly() *errors.Error {
	e := errors.New(425, ERROR_TOO_EARLY.String(), "")
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_TOO_EARLY.Number()))}
	return e
}

func DefaultErrorUpgradeRequired() *errors.Error {
	e := errors.New(426, ERROR_UPGRADE_REQUIRED.String(), "")
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_UPGRADE_REQUIRED.Number()))}
	return e
}

func DefaultErrorPreconditionRequired() *errors.Error {
	e := errors.New(428, ERROR_PRECONDITION_REQUIRED.String(), "")
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_PRECONDITION_REQUIRED.Number()))}
	return e
}

func DefaultErrorTooManyRequests() *errors.Error {
	e := errors.New(429, ERROR_TOO_MANY_REQUESTS.String(), "")
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_TOO_MANY_REQUESTS.Number()))}
	return e
}

func DefaultErrorRequestHeaderFieldsTooLarge() *errors.Error {
	e := errors.New(431, ERROR_REQUEST_HEADER_FIELDS_TOO_LARGE.String(), "")
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_REQUEST_HEADER_FIELDS_TOO_LARGE.Number()))}
	return e
}

func DefaultErrorUnavailableForLegalReasons() *errors.Error {
	e := errors.New(451, ERROR_UNAVAILABLE_FOR_LEGAL_REASONS.String(), "")
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_UNAVAILABLE_FOR_LEGAL_REASONS.Number()))}
	return e
}

func DefaultErrorClientClose() *errors.Error {
	e := errors.New(499, ERROR_CLIENT_CLOSE.String(), "")
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_CLIENT_CLOSE.Number()))}
	return e
}

// INTERNAL_SERVER Internal Server Error
func DefaultErrorInternalServer() *errors.Error {
	e := errors.New(500, ERROR_INTERNAL_SERVER.String(), "INTERNAL_SERVER Internal Server Error")
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_INTERNAL_SERVER.Number()))}
	return e
}

func DefaultErrorNotImplemented() *errors.Error {
	e := errors.New(501, ERROR_NOT_IMPLEMENTED.String(), "")
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_NOT_IMPLEMENTED.Number()))}
	return e
}

func DefaultErrorBadGateway() *errors.Error {
	e := errors.New(502, ERROR_BAD_GATEWAY.String(), "")
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_BAD_GATEWAY.Number()))}
	return e
}

func DefaultErrorServiceUnavailable() *errors.Error {
	e := errors.New(503, ERROR_SERVICE_UNAVAILABLE.String(), "")
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_SERVICE_UNAVAILABLE.Number()))}
	return e
}

func DefaultErrorGatewayTimeout() *errors.Error {
	e := errors.New(504, ERROR_GATEWAY_TIMEOUT.String(), "")
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_GATEWAY_TIMEOUT.Number()))}
	return e
}

func DefaultErrorHttpVersionNotSupported() *errors.Error {
	e := errors.New(505, ERROR_HTTP_VERSION_NOT_SUPPORTED.String(), "")
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_HTTP_VERSION_NOT_SUPPORTED.Number()))}
	return e
}

func DefaultErrorVariantAlsoNegotiates() *errors.Error {
	e := errors.New(506, ERROR_VARIANT_ALSO_NEGOTIATES.String(), "")
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_VARIANT_ALSO_NEGOTIATES.Number()))}
	return e
}

func DefaultErrorInsufficientStorage() *errors.Error {
	e := errors.New(507, ERROR_INSUFFICIENT_STORAGE.String(), "")
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_INSUFFICIENT_STORAGE.Number()))}
	return e
}

func DefaultErrorLoopDetected() *errors.Error {
	e := errors.New(508, ERROR_LOOP_DETECTED.String(), "")
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_LOOP_DETECTED.Number()))}
	return e
}

func DefaultErrorNotExtended() *errors.Error {
	e := errors.New(510, ERROR_NOT_EXTENDED.String(), "")
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_NOT_EXTENDED.Number()))}
	return e
}

func DefaultErrorNetworkAuthenticationRequired() *errors.Error {
	e := errors.New(511, ERROR_NETWORK_AUTHENTICATION_REQUIRED.String(), "")
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_NETWORK_AUTHENTICATION_REQUIRED.Number()))}
	return e
}
