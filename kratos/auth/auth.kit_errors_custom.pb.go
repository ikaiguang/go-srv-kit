// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package authpkg

import (
	errors "github.com/go-kratos/kratos/v2/errors"
	strconv "strconv"
)

var ERROR_http_code = map[string]int{

	"UNKNOWN":                401,
	"TOKEN_MISSING":          401,
	"TOKEN_KEY_MISSING":      401,
	"TOKEN_METHOD_MISSING":   401,
	"UNAUTHORIZED":           401,
	"TOKEN_EXPIRED":          401,
	"AUTHENTICATION_FAILED":  401,
	"TOKEN_INVALID":          401,
	"TOKEN_DEPRECATED":       401,
	"TOKEN_NOT_IN_WHITELIST": 401,
	"VERIFICATION_FAILED":    401,
	"INVALID_CLAIMS":         401,
}

func (x ERROR) HTTPCode() int {
	if v, ok := ERROR_http_code[x.String()]; ok {
		return v
	}
	return 500
}

func DefaultErrorUnknown() *errors.Error {
	e := errors.New(401, ERROR_UNKNOWN.String(), "")
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_UNKNOWN.Number()))}
	return e
}

func DefaultErrorTokenMissing() *errors.Error {
	e := errors.New(401, ERROR_TOKEN_MISSING.String(), "")
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_TOKEN_MISSING.Number()))}
	return e
}

func DefaultErrorTokenKeyMissing() *errors.Error {
	e := errors.New(401, ERROR_TOKEN_KEY_MISSING.String(), "")
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_TOKEN_KEY_MISSING.Number()))}
	return e
}

func DefaultErrorTokenMethodMissing() *errors.Error {
	e := errors.New(401, ERROR_TOKEN_METHOD_MISSING.String(), "")
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_TOKEN_METHOD_MISSING.Number()))}
	return e
}

func DefaultErrorUnauthorized() *errors.Error {
	e := errors.New(401, ERROR_UNAUTHORIZED.String(), "")
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_UNAUTHORIZED.Number()))}
	return e
}

func DefaultErrorTokenExpired() *errors.Error {
	e := errors.New(401, ERROR_TOKEN_EXPIRED.String(), "")
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_TOKEN_EXPIRED.Number()))}
	return e
}

func DefaultErrorAuthenticationFailed() *errors.Error {
	e := errors.New(401, ERROR_AUTHENTICATION_FAILED.String(), "")
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_AUTHENTICATION_FAILED.Number()))}
	return e
}

func DefaultErrorTokenInvalid() *errors.Error {
	e := errors.New(401, ERROR_TOKEN_INVALID.String(), "")
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_TOKEN_INVALID.Number()))}
	return e
}

func DefaultErrorTokenDeprecated() *errors.Error {
	e := errors.New(401, ERROR_TOKEN_DEPRECATED.String(), "")
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_TOKEN_DEPRECATED.Number()))}
	return e
}

func DefaultErrorTokenNotInWhitelist() *errors.Error {
	e := errors.New(401, ERROR_TOKEN_NOT_IN_WHITELIST.String(), "")
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_TOKEN_NOT_IN_WHITELIST.Number()))}
	return e
}

func DefaultErrorVerificationFailed() *errors.Error {
	e := errors.New(401, ERROR_VERIFICATION_FAILED.String(), "")
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_VERIFICATION_FAILED.Number()))}
	return e
}

func DefaultErrorInvalidClaims() *errors.Error {
	e := errors.New(401, ERROR_INVALID_CLAIMS.String(), "")
	e.Metadata = map[string]string{"reason": strconv.Itoa(int(ERROR_INVALID_CLAIMS.Number()))}
	return e
}
