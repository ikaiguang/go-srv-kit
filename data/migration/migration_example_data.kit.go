// Package migrationutil
// Package datas
// Code generated by ikaiguang. <https://github.com/ikaiguang>
package migrationutil

import (
	"bytes"
	"strings"

	gorm "gorm.io/gorm"

	gormutil "github.com/ikaiguang/go-srv-kit/data/gorm"
)

// migrationRepo repo
type migrationRepo struct {
	dbConn          *gorm.DB  // *gorm.DB
	MigrationSchema Migration // Migration
}

// NewMigrationDataRepo new data repo
func NewMigrationDataRepo(dbConn *gorm.DB) MigrationDataRepo {
	return &migrationRepo{
		dbConn: dbConn,
	}
}

// =============== 创建 ===============

// create insert one
func (s *migrationRepo) create(dbConn *gorm.DB, dataModel *MigrationEntity) (err error) {
	err = dbConn.Create(dataModel).Error
	if err != nil {
		return err
	}
	return
}

// Create insert one
func (s *migrationRepo) Create(dataModel *MigrationEntity) error {
	return s.create(s.dbConn, dataModel)
}

// CreateWithDBConn create
func (s *migrationRepo) CreateWithDBConn(dbConn *gorm.DB, dataModel *MigrationEntity) error {
	return s.create(dbConn, dataModel)
}

// existCreate exist create
func (s *migrationRepo) existCreate(dbConn *gorm.DB, dataModel *MigrationEntity) (anotherModel *MigrationEntity, isNotFound bool, err error) {
	anotherModel = new(MigrationEntity)
	err = dbConn.Table(s.MigrationSchema.TableName()).
		Where("id = ?", dataModel.Id).
		First(anotherModel).Error
	if err != nil {
		if err == gorm.ErrRecordNotFound {
			isNotFound = true
			err = nil
		}
		return
	}
	return
}

// ExistCreate exist create
func (s *migrationRepo) ExistCreate(dataModel *MigrationEntity) (anotherModel *MigrationEntity, isNotFound bool, err error) {
	return s.existCreate(s.dbConn, dataModel)
}

// ExistCreateWithDBConn exist create
func (s *migrationRepo) ExistCreateWithDBConn(dbConn *gorm.DB, dataModel *MigrationEntity) (anotherModel *MigrationEntity, isNotFound bool, err error) {
	return s.existCreate(dbConn, dataModel)
}

// createInBatches create many
func (s *migrationRepo) createInBatches(dbConn *gorm.DB, dataModels []*MigrationEntity, batchSize int) (err error) {
	err = dbConn.CreateInBatches(dataModels, batchSize).Error
	if err != nil {
		return err
	}
	return
}

// CreateInBatches create many
func (s *migrationRepo) CreateInBatches(dataModels []*MigrationEntity, batchSize int) error {
	return s.createInBatches(s.dbConn, dataModels, batchSize)
}

// CreateInBatchesWithDBConn create many
func (s *migrationRepo) CreateInBatchesWithDBConn(dbConn *gorm.DB, dataModels []*MigrationEntity, batchSize int) error {
	return s.createInBatches(dbConn, dataModels, batchSize)
}

// =============== 更新 ===============

// update update
func (s *migrationRepo) update(dbConn *gorm.DB, dataModel *MigrationEntity) (err error) {
	err = dbConn.Table(s.MigrationSchema.TableName()).
		Where("id = ?", dataModel.Id).
		Save(dataModel).Error
	if err != nil {
		return err
	}
	return
}

// Update update
func (s *migrationRepo) Update(dataModel *MigrationEntity) error {
	return s.update(s.dbConn, dataModel)
}

// UpdateWithDBConn update
func (s *migrationRepo) UpdateWithDBConn(dbConn *gorm.DB, dataModel *MigrationEntity) error {
	return s.update(dbConn, dataModel)
}

// existUpdate exist update
func (s *migrationRepo) existUpdate(dbConn *gorm.DB, dataModel *MigrationEntity) (anotherModel *MigrationEntity, isNotFound bool, err error) {
	anotherModel = new(MigrationEntity)
	err = dbConn.Table(s.MigrationSchema.TableName()).
		Where("id = ?", dataModel.Id).
		Where("id != ?", dataModel.Id).
		First(anotherModel).Error
	if err != nil {
		if err == gorm.ErrRecordNotFound {
			isNotFound = true
			err = nil
		}
		return
	}
	return
}

// ExistUpdate exist update
func (s *migrationRepo) ExistUpdate(dataModel *MigrationEntity) (anotherModel *MigrationEntity, isNotFound bool, err error) {
	return s.existUpdate(s.dbConn, dataModel)
}

// ExistUpdateWithDBConn exist update
func (s *migrationRepo) ExistUpdateWithDBConn(dbConn *gorm.DB, dataModel *MigrationEntity) (anotherModel *MigrationEntity, isNotFound bool, err error) {
	return s.existUpdate(dbConn, dataModel)
}

// =============== query one : 查一个 ===============

// queryOneById query one by id
func (s *migrationRepo) queryOneById(dbConn *gorm.DB, id interface{}) (dataModel *MigrationEntity, isNotFound bool, err error) {
	dataModel = new(MigrationEntity)
	err = dbConn.Table(s.MigrationSchema.TableName()).
		Where("id = ?", id).
		First(dataModel).Error
	if err != nil {
		if err == gorm.ErrRecordNotFound {
			err = nil
			isNotFound = true
		}
		return
	}
	return
}

// QueryOneById query one by id
func (s *migrationRepo) QueryOneById(id interface{}) (dataModel *MigrationEntity, isNotFound bool, err error) {
	return s.queryOneById(s.dbConn, id)
}

// QueryOneByIdWithDBConn query one by id
func (s *migrationRepo) QueryOneByIdWithDBConn(dbConn *gorm.DB, id interface{}) (dataModel *MigrationEntity, isNotFound bool, err error) {
	return s.queryOneById(dbConn, id)
}

// QueryOneByIdentifier query one by identifier
func (s *migrationRepo) QueryOneByIdentifier(identifier string) (dataModel *MigrationEntity, isNotFound bool, err error) {
	dataModel = new(MigrationEntity)
	err = s.dbConn.Table(s.MigrationSchema.TableName()).
		Where("migration_identifier = ?", identifier).
		First(dataModel).Error
	if err != nil {
		if err == gorm.ErrRecordNotFound {
			err = nil
			isNotFound = true
		}
		return
	}
	return
}

// queryOneByConditions query one by conditions
func (s *migrationRepo) queryOneByConditions(dbConn *gorm.DB, conditions map[string]interface{}) (dataModel *MigrationEntity, isNotFound bool, err error) {
	dataModel = new(MigrationEntity)
	dbConn = dbConn.Table(s.MigrationSchema.TableName())
	err = s.WhereConditions(dbConn, conditions).
		First(dataModel).Error
	if err != nil {
		if err == gorm.ErrRecordNotFound {
			err = nil
			isNotFound = true
		}
		return
	}
	return
}

// QueryOneByConditions query one by conditions
func (s *migrationRepo) QueryOneByConditions(conditions map[string]interface{}) (dataModel *MigrationEntity, isNotFound bool, err error) {
	return s.queryOneByConditions(s.dbConn, conditions)
}

// QueryOneByConditionsWithDBConn query one by conditions
func (s *migrationRepo) QueryOneByConditionsWithDBConn(dbConn *gorm.DB, conditions map[string]interface{}) (dataModel *MigrationEntity, isNotFound bool, err error) {
	return s.queryOneByConditions(dbConn, conditions)
}

// =============== query all : 查全部 ===============

// queryAllByConditions query all by conditions
func (s *migrationRepo) queryAllByConditions(dbConn *gorm.DB, conditions map[string]interface{}) (dataModels []*MigrationEntity, err error) {
	dbConn = dbConn.Table(s.MigrationSchema.TableName())
	err = s.WhereConditions(dbConn, conditions).
		Find(&dataModels).Error
	if err != nil {
		return dataModels, err
	}
	return
}

// QueryAllByConditions query all by conditions
func (s *migrationRepo) QueryAllByConditions(conditions map[string]interface{}) ([]*MigrationEntity, error) {
	return s.queryAllByConditions(s.dbConn, conditions)
}

// QueryAllByConditionsWithDBConn query all by conditions
func (s *migrationRepo) QueryAllByConditionsWithDBConn(dbConn *gorm.DB, conditions map[string]interface{}) ([]*MigrationEntity, error) {
	return s.queryAllByConditions(dbConn, conditions)
}

// =============== list : 列表 ===============

// list 列表
func (s *migrationRepo) list(dbConn *gorm.DB, conditions map[string]interface{}, paginatorArgs *gormutil.PaginatorArgs) (dataModels []*MigrationEntity, recordCount int64, err error) {
	// query where
	dbConn = dbConn.Table(s.MigrationSchema.TableName())
	dbConn = s.WhereConditions(dbConn, conditions)
	dbConn = gormutil.AssembleWheres(dbConn, paginatorArgs.PageWheres)

	err = dbConn.Count(&recordCount).Error
	if err != nil {
		return
	} else if recordCount == 0 {
		return // empty
	}

	// pagination
	dbConn = gormutil.AssembleOrders(dbConn, paginatorArgs.PageOrders)
	err = gormutil.Paginator(dbConn, paginatorArgs.PageOption).
		Find(&dataModels).Error
	if err != nil {
		return
	}
	return
}

// List 列表
func (s *migrationRepo) List(conditions map[string]interface{}, paginatorArgs *gormutil.PaginatorArgs) ([]*MigrationEntity, int64, error) {
	return s.list(s.dbConn, conditions, paginatorArgs)
}

// ListWithDBConn 列表
func (s *migrationRepo) ListWithDBConn(dbConn *gorm.DB, conditions map[string]interface{}, paginatorArgs *gormutil.PaginatorArgs) ([]*MigrationEntity, int64, error) {
	return s.list(dbConn, conditions, paginatorArgs)
}

// =============== delete : 删除 ===============

// delete delete one
func (s *migrationRepo) delete(dbConn *gorm.DB, dataModel *MigrationEntity) (err error) {
	err = dbConn.Table(s.MigrationSchema.TableName()).
		Where("id = ?", dataModel.Id).
		Delete(dataModel).Error
	if err != nil {
		return err
	}
	return
}

// Delete delete one
func (s *migrationRepo) Delete(dataModel *MigrationEntity) error {
	return s.delete(s.dbConn, dataModel)
}

// DeleteWithDBConn delete one
func (s *migrationRepo) DeleteWithDBConn(dbConn *gorm.DB, dataModel *MigrationEntity) error {
	return s.delete(dbConn, dataModel)
}

// deleteByIds delete by ids
func (s *migrationRepo) deleteByIds(dbConn *gorm.DB, ids interface{}) (err error) {
	err = dbConn.Table(s.MigrationSchema.TableName()).
		Where("id in (?)", ids).
		Delete(MigrationEntity{}).Error
	if err != nil {
		return err
	}
	return
}

// DeleteByIds delete by ids
func (s *migrationRepo) DeleteByIds(ids interface{}) error {
	return s.deleteByIds(s.dbConn, ids)
}

// DeleteByIdsWithDBConn delete by ids
func (s *migrationRepo) DeleteByIdsWithDBConn(dbConn *gorm.DB, ids interface{}) error {
	return s.deleteByIds(dbConn, ids)
}

// =============== insert : 批量入库 ===============

var _ gormutil.BatchInsertRepo = new(MigrationSlice)

// MigrationSlice 表切片
type MigrationSlice []*MigrationEntity

// TableName 表名
func (s *MigrationSlice) TableName() string {
	if len(*s) > 0 {
		return (*s)[0].TableName()
	}
	return (&MigrationEntity{}).TableName()
}

// Len 长度
func (s *MigrationSlice) Len() int {
	return len(*s)
}

// InsertColumns 批量入库的列
func (s *MigrationSlice) InsertColumns() (columnList []string, placeholder string) {
	// columns
	columnList = []string{
		"server_version", "migration_identifier", "migration_batch", "migration_desc", "migration_extra_info", "created_time",
		"updated_time",
	}

	// placeholders
	insertPlaceholderBytes := bytes.Repeat([]byte("?, "), len(columnList))
	insertPlaceholderBytes = bytes.TrimSuffix(insertPlaceholderBytes, []byte(", "))

	return columnList, string(insertPlaceholderBytes)
}

// InsertValues 批量入库的值
func (s *MigrationSlice) InsertValues(args *gormutil.BatchInsertValueArgs) (prepareData []interface{}, placeholderSlice []string) {
	dataModels := (*s)[args.StepStart:args.StepEnd]
	for index := range dataModels {
		// placeholder
		placeholderSlice = append(placeholderSlice, "("+args.InsertPlaceholder+")")

		// prepare data
		prepareData = append(prepareData, dataModels[index].ServerVersion)
		prepareData = append(prepareData, dataModels[index].MigrationIdentifier)
		prepareData = append(prepareData, dataModels[index].MigrationBatch)
		prepareData = append(prepareData, dataModels[index].MigrationDesc)
		prepareData = append(prepareData, dataModels[index].MigrationExtraInfo)
		prepareData = append(prepareData, dataModels[index].CreatedTime)
		prepareData = append(prepareData, dataModels[index].UpdatedTime)
	}
	return prepareData, placeholderSlice
}

// UpdateColumns 批量入库的列
func (s *MigrationSlice) UpdateColumns() (columnList []string) {
	// columns
	columnList = []string{
		"server_version=excluded.server_version", "migration_identifier=excluded.migration_identifier", "migration_batch=excluded.migration_batch",
		"migration_desc=excluded.migration_desc", "migration_extra_info=excluded.migration_extra_info", "created_time=excluded.created_time",
		"updated_time=excluded.updated_time",
	}
	return columnList
}

// ConflictActionForMySQL 更新冲突时的操作
func (s *MigrationSlice) ConflictActionForMySQL() (req *gormutil.BatchInsertConflictActionReq) {
	req = &gormutil.BatchInsertConflictActionReq{
		OnConflictValueAlias:  "AS excluded",
		OnConflictTarget:      "ON DUPLICATE KEY",
		OnConflictAction:      "UPDATE " + strings.Join(s.UpdateColumns(), ", "),
		OnConflictPrepareData: nil,
	}
	return req
}

// ConflictActionForPostgres 更新冲突时的操作
func (s *MigrationSlice) ConflictActionForPostgres() (req *gormutil.BatchInsertConflictActionReq) {
	req = &gormutil.BatchInsertConflictActionReq{
		OnConflictValueAlias:  "",
		OnConflictTarget:      "ON CONFLICT(id)",
		OnConflictAction:      "DO UPDATE SET " + strings.Join(s.UpdateColumns(), ", "),
		OnConflictPrepareData: nil,
	}
	return req
}

// insert 批量插入
func (s *migrationRepo) insert(dbConn *gorm.DB, dataModels MigrationSlice) error {
	return gormutil.BatchInsert(dbConn, &dataModels)
}

// Insert 批量插入
func (s *migrationRepo) Insert(dataModels []*MigrationEntity) error {
	return s.insert(s.dbConn, dataModels)
}

// InsertWithDBConn 批量插入
func (s *migrationRepo) InsertWithDBConn(dbConn *gorm.DB, dataModels []*MigrationEntity) error {
	return s.insert(dbConn, dataModels)
}

// =============== conditions : 条件 ===============

// WhereConditions orm where
func (s *migrationRepo) WhereConditions(dbConn *gorm.DB, conditions map[string]interface{}) *gorm.DB {

	// table name
	//tableName := s.MigrationSchema.TableName()

	// On-demand loading

	// id
	//if data, ok := conditions["id"]; ok {
	//	dbConn = dbConn.Where(tableName+".id = ?", data)
	//}

	// server_version
	//if data, ok := conditions["server_version"]; ok {
	//	dbConn = dbConn.Where(tableName+".server_version = ?", data)
	//}

	// migration_identifier
	//if data, ok := conditions["migration_identifier"]; ok {
	//	dbConn = dbConn.Where(tableName+".migration_identifier = ?", data)
	//}

	// migration_batch
	//if data, ok := conditions["migration_batch"]; ok {
	//	dbConn = dbConn.Where(tableName+".migration_batch = ?", data)
	//}

	// migration_desc
	//if data, ok := conditions["migration_desc"]; ok {
	//	dbConn = dbConn.Where(tableName+".migration_desc = ?", data)
	//}

	// migration_extra_info
	//if data, ok := conditions["migration_extra_info"]; ok {
	//	dbConn = dbConn.Where(tableName+".migration_extra_info = ?", data)
	//}

	// created_time
	//if data, ok := conditions["created_time"]; ok {
	//	dbConn = dbConn.Where(tableName+".created_time = ?", data)
	//}

	// updated_time
	//if data, ok := conditions["updated_time"]; ok {
	//	dbConn = dbConn.Where(tableName+".updated_time = ?", data)
	//}

	return dbConn
}

// UpdateColumns update columns
func (s *migrationRepo) UpdateColumns(conditions map[string]interface{}) map[string]interface{} {

	// update columns
	updateColumns := make(map[string]interface{})

	// On-demand loading

	// id
	//if data, ok := conditions["id"]; ok {
	//	updateColumns["id"] = data
	//}

	// server_version
	//if data, ok := conditions["server_version"]; ok {
	//	updateColumns["server_version"] = data
	//}

	// migration_identifier
	//if data, ok := conditions["migration_identifier"]; ok {
	//	updateColumns["migration_identifier"] = data
	//}

	// migration_batch
	//if data, ok := conditions["migration_batch"]; ok {
	//	updateColumns["migration_batch"] = data
	//}

	// migration_desc
	//if data, ok := conditions["migration_desc"]; ok {
	//	updateColumns["migration_desc"] = data
	//}

	// migration_extra_info
	//if data, ok := conditions["migration_extra_info"]; ok {
	//	updateColumns["migration_extra_info"] = data
	//}

	// created_time
	//if data, ok := conditions["created_time"]; ok {
	//	updateColumns["created_time"] = data
	//}

	// updated_time
	//if data, ok := conditions["updated_time"]; ok {
	//	updateColumns["updated_time"] = data
	//}

	return updateColumns
}
