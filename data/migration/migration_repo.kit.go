// Package migrationutil
// Package repos
// Code generated by ikaiguang. <https://github.com/ikaiguang>
package migrationutil

import (
	"context"
	"gorm.io/gorm"
	"time"
)

// MigrationEntity srv_migration
// Migration 数据库迁移
// 文档地址：https://gorm.io/docs/models.html
// MySQL 支持 unsigned
// Postgres 不支持 unsigned
// MySQL 支持 auto_increment
// Postgres : serial or bigserial
type MigrationEntity struct {
	Id                  uint64    `gorm:"column:id;primaryKey" json:"id"`                          // ID
	ServerVersion       string    `gorm:"column:server_version" json:"server_version"`             // 服务版本
	MigrationIdentifier string    `gorm:"column:migration_identifier" json:"migration_identifier"` // 迁移key：唯一
	MigrationBatch      uint64    `gorm:"column:migration_batch" json:"migration_batch"`           // 迁移批次
	MigrationDesc       string    `gorm:"column:migration_desc" json:"migration_desc"`             // 迁移描述
	MigrationExtraInfo  string    `gorm:"column:migration_extra_info" json:"migration_extra_info"` // 迁移：额外信息
	CreatedTime         time.Time `gorm:"column:created_time" json:"created_time"`                 // 创建时间
	UpdatedTime         time.Time `gorm:"column:updated_time" json:"updated_time"`                 // 更新时间
}

// MigrationDataRepo repo
type MigrationDataRepo interface {
	Create(ctx context.Context, dataModel *MigrationEntity) error
	QueryOneByIdentifier(ctx context.Context, identifier string) (dataModel *MigrationEntity, isNotFound bool, err error)
	DeleteOneByIdentifier(ctx context.Context, identifier string) error
}

// migrationRepo repo
type migrationRepo struct {
	dbConn          *gorm.DB  // *gorm.DB
	MigrationSchema Migration // Migration
}

// NewMigrationDataRepo new data repo
func NewMigrationDataRepo(dbConn *gorm.DB) MigrationDataRepo {
	return &migrationRepo{
		dbConn: dbConn,
	}
}

// create insert one
func (s *migrationRepo) create(ctx context.Context, dbConn *gorm.DB, dataModel *MigrationEntity) (err error) {
	err = dbConn.WithContext(ctx).
		Table(s.MigrationSchema.TableName()).
		Create(dataModel).Error
	if err != nil {
		return err
	}
	return
}

// Create insert one
func (s *migrationRepo) Create(ctx context.Context, dataModel *MigrationEntity) error {
	return s.create(ctx, s.dbConn, dataModel)
}

// CreateWithDBConn create
func (s *migrationRepo) CreateWithDBConn(ctx context.Context, dbConn *gorm.DB, dataModel *MigrationEntity) error {
	return s.create(ctx, dbConn, dataModel)
}

// QueryOneByIdentifier query one by identifier
func (s *migrationRepo) QueryOneByIdentifier(ctx context.Context, identifier string) (dataModel *MigrationEntity, isNotFound bool, err error) {
	dataModel = new(MigrationEntity)
	err = s.dbConn.WithContext(ctx).
		Table(s.MigrationSchema.TableName()).
		Where(FieldMigrationIdentifier+" = ?", identifier).
		First(dataModel).Error
	if err != nil {
		if err == gorm.ErrRecordNotFound {
			err = nil
			isNotFound = true
		}
		return
	}
	return
}

// DeleteOneByIdentifier delete
func (s *migrationRepo) DeleteOneByIdentifier(ctx context.Context, identifier string) error {
	err := s.dbConn.WithContext(ctx).
		Table(s.MigrationSchema.TableName()).
		Where(FieldMigrationIdentifier+" = ?", identifier).
		Delete(MigrationEntity{}).Error
	if err != nil {
		return err
	}
	return nil
}

// Migration CHARSET utf8mb4
// Migration 数据库迁移
// 文档地址：https://gorm.io/docs/models.html
// MySQL 支持 unsigned
// Postgres 不支持 unsigned
// MySQL 支持 auto_increment
// Postgres : serial or bigserial
type Migration struct {
	Id                  uint64    `gorm:"column:id;type:uint;autoIncrement;comment:ID" json:"id"`
	ServerVersion       string    `gorm:"column:server_version;type:string;size:255;not null;default:'';comment:服务版本" json:"server_version"`
	MigrationIdentifier string    `gorm:"column:migration_identifier;unique;type:string;size:255;not null;default:'';comment:迁移key：唯一" json:"migration_identifier"`
	MigrationBatch      uint      `gorm:"column:migration_batch;type:uint;not null;default:0;comment:迁移批次" json:"migration_batch"`
	MigrationDesc       string    `gorm:"column:migration_desc;type:text;not null;comment:迁移描述" json:"migration_desc"`
	MigrationExtraInfo  string    `gorm:"column:migration_extra_info;type:json;not null;comment:迁移：额外信息" json:"migration_extra_info"`
	CreatedTime         time.Time `gorm:"column:created_time;type:time;not null;comment:创建时间" json:"created_time"`
	UpdatedTime         time.Time `gorm:"column:updated_time;type:time;not null;comment:更新时间" json:"updated_time"`
}

// MigrationSchema ...
var MigrationSchema Migration

// TableName table name
func (s *Migration) TableName() string {
	return DefaultTableName
}

// CreateTableMigrator create table migrator
func (s *Migration) CreateTableMigrator(migrator gorm.Migrator) MigrationInterface {
	return NewCreateTable(migrator, Version, s)
}

// DropTableMigrator create table migrator
func (s *Migration) DropTableMigrator(migrator gorm.Migrator) MigrationInterface {
	return NewDropTable(migrator, Version, s)
}
