// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v6.30.2
// source: api/config/config.proto

package configpb

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TransportTypeEnum_TransportType int32

const (
	TransportTypeEnum_UNSPECIFIED TransportTypeEnum_TransportType = 0 // 未指定，默认: HTTP
	TransportTypeEnum_HTTP        TransportTypeEnum_TransportType = 1
	TransportTypeEnum_GRPC        TransportTypeEnum_TransportType = 2
)

// Enum value maps for TransportTypeEnum_TransportType.
var (
	TransportTypeEnum_TransportType_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "HTTP",
		2: "GRPC",
	}
	TransportTypeEnum_TransportType_value = map[string]int32{
		"UNSPECIFIED": 0,
		"HTTP":        1,
		"GRPC":        2,
	}
)

func (x TransportTypeEnum_TransportType) Enum() *TransportTypeEnum_TransportType {
	p := new(TransportTypeEnum_TransportType)
	*p = x
	return p
}

func (x TransportTypeEnum_TransportType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransportTypeEnum_TransportType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_config_config_proto_enumTypes[0].Descriptor()
}

func (TransportTypeEnum_TransportType) Type() protoreflect.EnumType {
	return &file_api_config_config_proto_enumTypes[0]
}

func (x TransportTypeEnum_TransportType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransportTypeEnum_TransportType.Descriptor instead.
func (TransportTypeEnum_TransportType) EnumDescriptor() ([]byte, []int) {
	return file_api_config_config_proto_rawDescGZIP(), []int{14, 0}
}

type RegistryTypeEnum_RegistryType int32

const (
	RegistryTypeEnum_UNSPECIFIED RegistryTypeEnum_RegistryType = 0 // 未指定，默认: ENDPOINT
	RegistryTypeEnum_ENDPOINT    RegistryTypeEnum_RegistryType = 1
	RegistryTypeEnum_CONSUL      RegistryTypeEnum_RegistryType = 2
	RegistryTypeEnum_ETCD        RegistryTypeEnum_RegistryType = 3
)

// Enum value maps for RegistryTypeEnum_RegistryType.
var (
	RegistryTypeEnum_RegistryType_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "ENDPOINT",
		2: "CONSUL",
		3: "ETCD",
	}
	RegistryTypeEnum_RegistryType_value = map[string]int32{
		"UNSPECIFIED": 0,
		"ENDPOINT":    1,
		"CONSUL":      2,
		"ETCD":        3,
	}
)

func (x RegistryTypeEnum_RegistryType) Enum() *RegistryTypeEnum_RegistryType {
	p := new(RegistryTypeEnum_RegistryType)
	*p = x
	return p
}

func (x RegistryTypeEnum_RegistryType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RegistryTypeEnum_RegistryType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_config_config_proto_enumTypes[1].Descriptor()
}

func (RegistryTypeEnum_RegistryType) Type() protoreflect.EnumType {
	return &file_api_config_config_proto_enumTypes[1]
}

func (x RegistryTypeEnum_RegistryType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RegistryTypeEnum_RegistryType.Descriptor instead.
func (RegistryTypeEnum_RegistryType) EnumDescriptor() ([]byte, []int) {
	return file_api_config_config_proto_rawDescGZIP(), []int{15, 0}
}

// Bootstrap 配置引导
type Bootstrap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	App               *App                 `protobuf:"bytes,1,opt,name=app,proto3" json:"app,omitempty"`
	Setting           *Setting             `protobuf:"bytes,2,opt,name=setting,proto3" json:"setting,omitempty"`
	Server            *Server              `protobuf:"bytes,101,opt,name=server,proto3" json:"server,omitempty"`
	Log               *Log                 `protobuf:"bytes,201,opt,name=log,proto3" json:"log,omitempty"`
	Mysql             *MySQL               `protobuf:"bytes,301,opt,name=mysql,proto3" json:"mysql,omitempty"`
	Psql              *PSQL                `protobuf:"bytes,302,opt,name=psql,proto3" json:"psql,omitempty"`
	Redis             *Redis               `protobuf:"bytes,303,opt,name=redis,proto3" json:"redis,omitempty"`
	Rabbitmq          *Rabbitmq            `protobuf:"bytes,304,opt,name=rabbitmq,proto3" json:"rabbitmq,omitempty"`
	Consul            *Consul              `protobuf:"bytes,305,opt,name=consul,proto3" json:"consul,omitempty"`
	Etcd              *Etcd                `protobuf:"bytes,306,opt,name=etcd,proto3" json:"etcd,omitempty"`
	Jaeger            *Jaeger              `protobuf:"bytes,307,opt,name=jaeger,proto3" json:"jaeger,omitempty"`
	Mongo             *Mongo               `protobuf:"bytes,308,opt,name=mongo,proto3" json:"mongo,omitempty"`
	Encrypt           *Encrypt             `protobuf:"bytes,401,opt,name=encrypt,proto3" json:"encrypt,omitempty"`
	ClusterServiceApi []*ClusterServiceApi `protobuf:"bytes,501,rep,name=cluster_service_api,json=clusterServiceApi,proto3" json:"cluster_service_api,omitempty"` // 应用程序接口
	ThirdPartyApi     []*ThirdPartyApi     `protobuf:"bytes,502,rep,name=third_party_api,json=thirdPartyApi,proto3" json:"third_party_api,omitempty"`             // 应用程序接口
	Snowflake         *Snowflake           `protobuf:"bytes,602,opt,name=snowflake,proto3" json:"snowflake,omitempty"`
}

func (x *Bootstrap) Reset() {
	*x = Bootstrap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_config_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bootstrap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bootstrap) ProtoMessage() {}

func (x *Bootstrap) ProtoReflect() protoreflect.Message {
	mi := &file_api_config_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bootstrap.ProtoReflect.Descriptor instead.
func (*Bootstrap) Descriptor() ([]byte, []int) {
	return file_api_config_config_proto_rawDescGZIP(), []int{0}
}

func (x *Bootstrap) GetApp() *App {
	if x != nil {
		return x.App
	}
	return nil
}

func (x *Bootstrap) GetSetting() *Setting {
	if x != nil {
		return x.Setting
	}
	return nil
}

func (x *Bootstrap) GetServer() *Server {
	if x != nil {
		return x.Server
	}
	return nil
}

func (x *Bootstrap) GetLog() *Log {
	if x != nil {
		return x.Log
	}
	return nil
}

func (x *Bootstrap) GetMysql() *MySQL {
	if x != nil {
		return x.Mysql
	}
	return nil
}

func (x *Bootstrap) GetPsql() *PSQL {
	if x != nil {
		return x.Psql
	}
	return nil
}

func (x *Bootstrap) GetRedis() *Redis {
	if x != nil {
		return x.Redis
	}
	return nil
}

func (x *Bootstrap) GetRabbitmq() *Rabbitmq {
	if x != nil {
		return x.Rabbitmq
	}
	return nil
}

func (x *Bootstrap) GetConsul() *Consul {
	if x != nil {
		return x.Consul
	}
	return nil
}

func (x *Bootstrap) GetEtcd() *Etcd {
	if x != nil {
		return x.Etcd
	}
	return nil
}

func (x *Bootstrap) GetJaeger() *Jaeger {
	if x != nil {
		return x.Jaeger
	}
	return nil
}

func (x *Bootstrap) GetMongo() *Mongo {
	if x != nil {
		return x.Mongo
	}
	return nil
}

func (x *Bootstrap) GetEncrypt() *Encrypt {
	if x != nil {
		return x.Encrypt
	}
	return nil
}

func (x *Bootstrap) GetClusterServiceApi() []*ClusterServiceApi {
	if x != nil {
		return x.ClusterServiceApi
	}
	return nil
}

func (x *Bootstrap) GetThirdPartyApi() []*ThirdPartyApi {
	if x != nil {
		return x.ThirdPartyApi
	}
	return nil
}

func (x *Bootstrap) GetSnowflake() *Snowflake {
	if x != nil {
		return x.Snowflake
	}
	return nil
}

// App application
type App struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectName          string            `protobuf:"bytes,1,opt,name=project_name,json=projectName,proto3" json:"project_name,omitempty"`                                                                  //
	ServerName           string            `protobuf:"bytes,2,opt,name=server_name,json=serverName,proto3" json:"server_name,omitempty"`                                                                     //
	ServerEnv            string            `protobuf:"bytes,3,opt,name=server_env,json=serverEnv,proto3" json:"server_env,omitempty"`                                                                        // 开发环境；值：DEVELOP、TESTING、PREVIEW、PRODUCTION
	ServerVersion        string            `protobuf:"bytes,4,opt,name=server_version,json=serverVersion,proto3" json:"server_version,omitempty"`                                                            //
	Id                   string            `protobuf:"bytes,5,opt,name=id,proto3" json:"id,omitempty"`                                                                                                       // 服务注册名称
	ConfigMethod         string            `protobuf:"bytes,40,opt,name=config_method,json=configMethod,proto3" json:"config_method,omitempty"`                                                              // 配置方式；值：LOCAL、CONSUL
	ConfigPathForGeneral string            `protobuf:"bytes,41,opt,name=config_path_for_general,json=configPathForGeneral,proto3" json:"config_path_for_general,omitempty"`                                  // 配置中心：基本配置路径
	ConfigPathForServer  string            `protobuf:"bytes,42,opt,name=config_path_for_server,json=configPathForServer,proto3" json:"config_path_for_server,omitempty"`                                     // 配置中心：本服务的配置路径
	RegistryEndpoints    []string          `protobuf:"bytes,60,rep,name=registry_endpoints,json=registryEndpoints,proto3" json:"registry_endpoints,omitempty"`                                               // 服务注册；如：http://192.168.100.200:10001、grpc://192.168.100.200:10002
	InternalDomains      []string          `protobuf:"bytes,61,rep,name=internal_domains,json=internalDomains,proto3" json:"internal_domains,omitempty"`                                                     // 服务内部域名；；如：http://xxx-service.namespace.svc.cluster.local:10001、grpc://xxx-service.namespace:10002
	ExternalDomains      []string          `protobuf:"bytes,62,rep,name=external_domains,json=externalDomains,proto3" json:"external_domains,omitempty"`                                                     // 服务外部域名；；如：http://xxx-service.namespace.svc.cluster.local:10001、grpc://xxx-service.namespace:10002
	Metadata             map[string]string `protobuf:"bytes,100,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 元数据
}

func (x *App) Reset() {
	*x = App{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_config_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *App) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*App) ProtoMessage() {}

func (x *App) ProtoReflect() protoreflect.Message {
	mi := &file_api_config_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use App.ProtoReflect.Descriptor instead.
func (*App) Descriptor() ([]byte, []int) {
	return file_api_config_config_proto_rawDescGZIP(), []int{1}
}

func (x *App) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *App) GetServerName() string {
	if x != nil {
		return x.ServerName
	}
	return ""
}

func (x *App) GetServerEnv() string {
	if x != nil {
		return x.ServerEnv
	}
	return ""
}

func (x *App) GetServerVersion() string {
	if x != nil {
		return x.ServerVersion
	}
	return ""
}

func (x *App) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *App) GetConfigMethod() string {
	if x != nil {
		return x.ConfigMethod
	}
	return ""
}

func (x *App) GetConfigPathForGeneral() string {
	if x != nil {
		return x.ConfigPathForGeneral
	}
	return ""
}

func (x *App) GetConfigPathForServer() string {
	if x != nil {
		return x.ConfigPathForServer
	}
	return ""
}

func (x *App) GetRegistryEndpoints() []string {
	if x != nil {
		return x.RegistryEndpoints
	}
	return nil
}

func (x *App) GetInternalDomains() []string {
	if x != nil {
		return x.InternalDomains
	}
	return nil
}

func (x *App) GetExternalDomains() []string {
	if x != nil {
		return x.ExternalDomains
	}
	return nil
}

func (x *App) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Setting 设置
type Setting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnableAuthMiddleware  bool             `protobuf:"varint,1,opt,name=enable_auth_middleware,json=enableAuthMiddleware,proto3" json:"enable_auth_middleware,omitempty"`    // 启用验证中间件
	EnableJaegerTracer    bool             `protobuf:"varint,2,opt,name=enable_jaeger_tracer,json=enableJaegerTracer,proto3" json:"enable_jaeger_tracer,omitempty"`          // 启用jaeger追踪
	EnableConsulRegistry  bool             `protobuf:"varint,3,opt,name=enable_consul_registry,json=enableConsulRegistry,proto3" json:"enable_consul_registry,omitempty"`    // 启用服务注册与发现
	EnableMigrateDb       bool             `protobuf:"varint,4,opt,name=enable_migrate_db,json=enableMigrateDb,proto3" json:"enable_migrate_db,omitempty"`                   // 启用数据库迁移
	EnableScheduleTask    bool             `protobuf:"varint,5,opt,name=enable_schedule_task,json=enableScheduleTask,proto3" json:"enable_schedule_task,omitempty"`          // 启用定时任务、计划任务
	EnableSnowflakeWorker bool             `protobuf:"varint,6,opt,name=enable_snowflake_worker,json=enableSnowflakeWorker,proto3" json:"enable_snowflake_worker,omitempty"` // 雪花算法节点
	Captcha               *Setting_Captcha `protobuf:"bytes,101,opt,name=captcha,proto3" json:"captcha,omitempty"`
	Login                 *Setting_Login   `protobuf:"bytes,201,opt,name=login,proto3" json:"login,omitempty"`
}

func (x *Setting) Reset() {
	*x = Setting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_config_config_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Setting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Setting) ProtoMessage() {}

func (x *Setting) ProtoReflect() protoreflect.Message {
	mi := &file_api_config_config_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Setting.ProtoReflect.Descriptor instead.
func (*Setting) Descriptor() ([]byte, []int) {
	return file_api_config_config_proto_rawDescGZIP(), []int{2}
}

func (x *Setting) GetEnableAuthMiddleware() bool {
	if x != nil {
		return x.EnableAuthMiddleware
	}
	return false
}

func (x *Setting) GetEnableJaegerTracer() bool {
	if x != nil {
		return x.EnableJaegerTracer
	}
	return false
}

func (x *Setting) GetEnableConsulRegistry() bool {
	if x != nil {
		return x.EnableConsulRegistry
	}
	return false
}

func (x *Setting) GetEnableMigrateDb() bool {
	if x != nil {
		return x.EnableMigrateDb
	}
	return false
}

func (x *Setting) GetEnableScheduleTask() bool {
	if x != nil {
		return x.EnableScheduleTask
	}
	return false
}

func (x *Setting) GetEnableSnowflakeWorker() bool {
	if x != nil {
		return x.EnableSnowflakeWorker
	}
	return false
}

func (x *Setting) GetCaptcha() *Setting_Captcha {
	if x != nil {
		return x.Captcha
	}
	return nil
}

func (x *Setting) GetLogin() *Setting_Login {
	if x != nil {
		return x.Login
	}
	return nil
}

// Server 服务
type Server struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Http *Server_HTTP `protobuf:"bytes,1,opt,name=http,proto3" json:"http,omitempty"` // http服务配置
	Grpc *Server_GRPC `protobuf:"bytes,2,opt,name=grpc,proto3" json:"grpc,omitempty"` // grpc服务配置
}

func (x *Server) Reset() {
	*x = Server{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_config_config_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Server) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Server) ProtoMessage() {}

func (x *Server) ProtoReflect() protoreflect.Message {
	mi := &file_api_config_config_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Server.ProtoReflect.Descriptor instead.
func (*Server) Descriptor() ([]byte, []int) {
	return file_api_config_config_proto_rawDescGZIP(), []int{3}
}

func (x *Server) GetHttp() *Server_HTTP {
	if x != nil {
		return x.Http
	}
	return nil
}

func (x *Server) GetGrpc() *Server_GRPC {
	if x != nil {
		return x.Grpc
	}
	return nil
}

type Log struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Console  *Log_Console `protobuf:"bytes,1,opt,name=console,proto3" json:"console,omitempty"`   // console 输出到控制台
	File     *Log_File    `protobuf:"bytes,2,opt,name=file,proto3" json:"file,omitempty"`         // file 输出到文件
	Gorm     *Log_File    `protobuf:"bytes,3,opt,name=gorm,proto3" json:"gorm,omitempty"`         // gorm 日志
	Rabbitmq *Log_File    `protobuf:"bytes,4,opt,name=rabbitmq,proto3" json:"rabbitmq,omitempty"` // rabbitmq 日志
}

func (x *Log) Reset() {
	*x = Log{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_config_config_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Log) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Log) ProtoMessage() {}

func (x *Log) ProtoReflect() protoreflect.Message {
	mi := &file_api_config_config_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Log.ProtoReflect.Descriptor instead.
func (*Log) Descriptor() ([]byte, []int) {
	return file_api_config_config_proto_rawDescGZIP(), []int{4}
}

func (x *Log) GetConsole() *Log_Console {
	if x != nil {
		return x.Console
	}
	return nil
}

func (x *Log) GetFile() *Log_File {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *Log) GetGorm() *Log_File {
	if x != nil {
		return x.Gorm
	}
	return nil
}

func (x *Log) GetRabbitmq() *Log_File {
	if x != nil {
		return x.Rabbitmq
	}
	return nil
}

// MySQL MySQL
type MySQL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable          bool                 `protobuf:"varint,100,opt,name=enable,proto3" json:"enable,omitempty"`                                           // 是否启动
	Dsn             string               `protobuf:"bytes,1,opt,name=dsn,proto3" json:"dsn,omitempty"`                                                    // dsn
	SlowThreshold   *durationpb.Duration `protobuf:"bytes,2,opt,name=slow_threshold,json=slowThreshold,proto3" json:"slow_threshold,omitempty"`           // 慢查询(s)
	LoggerEnable    bool                 `protobuf:"varint,3,opt,name=logger_enable,json=loggerEnable,proto3" json:"logger_enable,omitempty"`             // 启用日志
	LoggerColorful  bool                 `protobuf:"varint,4,opt,name=logger_colorful,json=loggerColorful,proto3" json:"logger_colorful,omitempty"`       // 多彩日志
	LoggerLevel     string               `protobuf:"bytes,5,opt,name=logger_level,json=loggerLevel,proto3" json:"logger_level,omitempty"`                 // 日志级别；值：DEBUG、INFO、WARN、ERROR、FATAL
	ConnMaxActive   uint32               `protobuf:"varint,6,opt,name=conn_max_active,json=connMaxActive,proto3" json:"conn_max_active,omitempty"`        // 连接可复用的最大时间
	ConnMaxLifetime *durationpb.Duration `protobuf:"bytes,7,opt,name=conn_max_lifetime,json=connMaxLifetime,proto3" json:"conn_max_lifetime,omitempty"`   // 可复用的最大时间(s)
	ConnMaxIdle     uint32               `protobuf:"varint,8,opt,name=conn_max_idle,json=connMaxIdle,proto3" json:"conn_max_idle,omitempty"`              // 连接池中空闲连接的最大数量
	ConnMaxIdleTime *durationpb.Duration `protobuf:"bytes,9,opt,name=conn_max_idle_time,json=connMaxIdleTime,proto3" json:"conn_max_idle_time,omitempty"` // 设置连接空闲的最长时间(s)
}

func (x *MySQL) Reset() {
	*x = MySQL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_config_config_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MySQL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MySQL) ProtoMessage() {}

func (x *MySQL) ProtoReflect() protoreflect.Message {
	mi := &file_api_config_config_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MySQL.ProtoReflect.Descriptor instead.
func (*MySQL) Descriptor() ([]byte, []int) {
	return file_api_config_config_proto_rawDescGZIP(), []int{5}
}

func (x *MySQL) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *MySQL) GetDsn() string {
	if x != nil {
		return x.Dsn
	}
	return ""
}

func (x *MySQL) GetSlowThreshold() *durationpb.Duration {
	if x != nil {
		return x.SlowThreshold
	}
	return nil
}

func (x *MySQL) GetLoggerEnable() bool {
	if x != nil {
		return x.LoggerEnable
	}
	return false
}

func (x *MySQL) GetLoggerColorful() bool {
	if x != nil {
		return x.LoggerColorful
	}
	return false
}

func (x *MySQL) GetLoggerLevel() string {
	if x != nil {
		return x.LoggerLevel
	}
	return ""
}

func (x *MySQL) GetConnMaxActive() uint32 {
	if x != nil {
		return x.ConnMaxActive
	}
	return 0
}

func (x *MySQL) GetConnMaxLifetime() *durationpb.Duration {
	if x != nil {
		return x.ConnMaxLifetime
	}
	return nil
}

func (x *MySQL) GetConnMaxIdle() uint32 {
	if x != nil {
		return x.ConnMaxIdle
	}
	return 0
}

func (x *MySQL) GetConnMaxIdleTime() *durationpb.Duration {
	if x != nil {
		return x.ConnMaxIdleTime
	}
	return nil
}

// Mongo
type Mongo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable            bool                 `protobuf:"varint,100,opt,name=enable,proto3" json:"enable,omitempty"`
	Debug             bool                 `protobuf:"varint,1,opt,name=debug,proto3" json:"debug,omitempty"`
	AppName           string               `protobuf:"bytes,2,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty"`
	Hosts             []string             `protobuf:"bytes,3,rep,name=hosts,proto3" json:"hosts,omitempty"`
	Addr              string               `protobuf:"bytes,4,opt,name=addr,proto3" json:"addr,omitempty"`
	Database          string               `protobuf:"bytes,5,opt,name=database,proto3" json:"database,omitempty"`
	MaxPoolSize       uint32               `protobuf:"varint,6,opt,name=max_pool_size,json=maxPoolSize,proto3" json:"max_pool_size,omitempty"`
	MinPoolSize       uint32               `protobuf:"varint,7,opt,name=min_pool_size,json=minPoolSize,proto3" json:"min_pool_size,omitempty"`
	MaxConnecting     uint32               `protobuf:"varint,8,opt,name=max_connecting,json=maxConnecting,proto3" json:"max_connecting,omitempty"`
	ConnectTimeout    *durationpb.Duration `protobuf:"bytes,9,opt,name=connect_timeout,json=connectTimeout,proto3" json:"connect_timeout,omitempty"`
	Timeout           *durationpb.Duration `protobuf:"bytes,10,opt,name=timeout,proto3" json:"timeout,omitempty"`
	HeartbeatInterval *durationpb.Duration `protobuf:"bytes,11,opt,name=heartbeat_interval,json=heartbeatInterval,proto3" json:"heartbeat_interval,omitempty"`
	MaxConnIdleTime   *durationpb.Duration `protobuf:"bytes,12,opt,name=max_conn_idle_time,json=maxConnIdleTime,proto3" json:"max_conn_idle_time,omitempty"`
	SlowThreshold     *durationpb.Duration `protobuf:"bytes,13,opt,name=slow_threshold,json=slowThreshold,proto3" json:"slow_threshold,omitempty"`
}

func (x *Mongo) Reset() {
	*x = Mongo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_config_config_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Mongo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mongo) ProtoMessage() {}

func (x *Mongo) ProtoReflect() protoreflect.Message {
	mi := &file_api_config_config_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mongo.ProtoReflect.Descriptor instead.
func (*Mongo) Descriptor() ([]byte, []int) {
	return file_api_config_config_proto_rawDescGZIP(), []int{6}
}

func (x *Mongo) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *Mongo) GetDebug() bool {
	if x != nil {
		return x.Debug
	}
	return false
}

func (x *Mongo) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *Mongo) GetHosts() []string {
	if x != nil {
		return x.Hosts
	}
	return nil
}

func (x *Mongo) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *Mongo) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *Mongo) GetMaxPoolSize() uint32 {
	if x != nil {
		return x.MaxPoolSize
	}
	return 0
}

func (x *Mongo) GetMinPoolSize() uint32 {
	if x != nil {
		return x.MinPoolSize
	}
	return 0
}

func (x *Mongo) GetMaxConnecting() uint32 {
	if x != nil {
		return x.MaxConnecting
	}
	return 0
}

func (x *Mongo) GetConnectTimeout() *durationpb.Duration {
	if x != nil {
		return x.ConnectTimeout
	}
	return nil
}

func (x *Mongo) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *Mongo) GetHeartbeatInterval() *durationpb.Duration {
	if x != nil {
		return x.HeartbeatInterval
	}
	return nil
}

func (x *Mongo) GetMaxConnIdleTime() *durationpb.Duration {
	if x != nil {
		return x.MaxConnIdleTime
	}
	return nil
}

func (x *Mongo) GetSlowThreshold() *durationpb.Duration {
	if x != nil {
		return x.SlowThreshold
	}
	return nil
}

// Redis redis
type Redis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// enable 是否启动
	Enable          bool                 `protobuf:"varint,100,opt,name=enable,proto3" json:"enable,omitempty"`
	Addresses       []string             `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
	Username        string               `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Password        string               `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	Db              uint32               `protobuf:"varint,4,opt,name=db,proto3" json:"db,omitempty"`
	DialTimeout     *durationpb.Duration `protobuf:"bytes,5,opt,name=dial_timeout,json=dialTimeout,proto3" json:"dial_timeout,omitempty"`                  // (s)
	ReadTimeout     *durationpb.Duration `protobuf:"bytes,6,opt,name=read_timeout,json=readTimeout,proto3" json:"read_timeout,omitempty"`                  // (s)
	WriteTimeout    *durationpb.Duration `protobuf:"bytes,7,opt,name=write_timeout,json=writeTimeout,proto3" json:"write_timeout,omitempty"`               // (s)
	ConnMaxActive   uint32               `protobuf:"varint,8,opt,name=conn_max_active,json=connMaxActive,proto3" json:"conn_max_active,omitempty"`         // 连接的最大数量
	ConnMaxLifetime *durationpb.Duration `protobuf:"bytes,9,opt,name=conn_max_lifetime,json=connMaxLifetime,proto3" json:"conn_max_lifetime,omitempty"`    // 连接可复用的最大时间(s)
	ConnMaxIdle     uint32               `protobuf:"varint,10,opt,name=conn_max_idle,json=connMaxIdle,proto3" json:"conn_max_idle,omitempty"`              // 连接池中空闲连接的最大数量
	ConnMinIdle     uint32               `protobuf:"varint,11,opt,name=conn_min_idle,json=connMinIdle,proto3" json:"conn_min_idle,omitempty"`              // 连接池中空闲连接的最小数量
	ConnMaxIdleTime *durationpb.Duration `protobuf:"bytes,12,opt,name=conn_max_idle_time,json=connMaxIdleTime,proto3" json:"conn_max_idle_time,omitempty"` // 设置连接空闲的最长时间(s)
}

func (x *Redis) Reset() {
	*x = Redis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_config_config_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Redis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Redis) ProtoMessage() {}

func (x *Redis) ProtoReflect() protoreflect.Message {
	mi := &file_api_config_config_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Redis.ProtoReflect.Descriptor instead.
func (*Redis) Descriptor() ([]byte, []int) {
	return file_api_config_config_proto_rawDescGZIP(), []int{7}
}

func (x *Redis) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *Redis) GetAddresses() []string {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *Redis) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Redis) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Redis) GetDb() uint32 {
	if x != nil {
		return x.Db
	}
	return 0
}

func (x *Redis) GetDialTimeout() *durationpb.Duration {
	if x != nil {
		return x.DialTimeout
	}
	return nil
}

func (x *Redis) GetReadTimeout() *durationpb.Duration {
	if x != nil {
		return x.ReadTimeout
	}
	return nil
}

func (x *Redis) GetWriteTimeout() *durationpb.Duration {
	if x != nil {
		return x.WriteTimeout
	}
	return nil
}

func (x *Redis) GetConnMaxActive() uint32 {
	if x != nil {
		return x.ConnMaxActive
	}
	return 0
}

func (x *Redis) GetConnMaxLifetime() *durationpb.Duration {
	if x != nil {
		return x.ConnMaxLifetime
	}
	return nil
}

func (x *Redis) GetConnMaxIdle() uint32 {
	if x != nil {
		return x.ConnMaxIdle
	}
	return 0
}

func (x *Redis) GetConnMinIdle() uint32 {
	if x != nil {
		return x.ConnMinIdle
	}
	return 0
}

func (x *Redis) GetConnMaxIdleTime() *durationpb.Duration {
	if x != nil {
		return x.ConnMaxIdleTime
	}
	return nil
}

// PSQL postgres
type PSQL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable          bool                 `protobuf:"varint,100,opt,name=enable,proto3" json:"enable,omitempty"` // 是否启动
	Dsn             string               `protobuf:"bytes,1,opt,name=dsn,proto3" json:"dsn,omitempty"`
	SlowThreshold   *durationpb.Duration `protobuf:"bytes,2,opt,name=slow_threshold,json=slowThreshold,proto3" json:"slow_threshold,omitempty"` // 慢查询(s)
	LoggerEnable    bool                 `protobuf:"varint,3,opt,name=logger_enable,json=loggerEnable,proto3" json:"logger_enable,omitempty"`
	LoggerColorful  bool                 `protobuf:"varint,4,opt,name=logger_colorful,json=loggerColorful,proto3" json:"logger_colorful,omitempty"`
	LoggerLevel     string               `protobuf:"bytes,5,opt,name=logger_level,json=loggerLevel,proto3" json:"logger_level,omitempty"`                 // 日志级别；值：DEBUG、INFO、WARN、ERROR、FATAL
	ConnMaxActive   uint32               `protobuf:"varint,6,opt,name=conn_max_active,json=connMaxActive,proto3" json:"conn_max_active,omitempty"`        // 连接可复用的最大时间
	ConnMaxLifetime *durationpb.Duration `protobuf:"bytes,7,opt,name=conn_max_lifetime,json=connMaxLifetime,proto3" json:"conn_max_lifetime,omitempty"`   // 可复用的最大时间(s)
	ConnMaxIdle     uint32               `protobuf:"varint,8,opt,name=conn_max_idle,json=connMaxIdle,proto3" json:"conn_max_idle,omitempty"`              // 连接池中空闲连接的最大数量
	ConnMaxIdleTime *durationpb.Duration `protobuf:"bytes,9,opt,name=conn_max_idle_time,json=connMaxIdleTime,proto3" json:"conn_max_idle_time,omitempty"` // 设置连接空闲的最长时间(s)
}

func (x *PSQL) Reset() {
	*x = PSQL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_config_config_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PSQL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PSQL) ProtoMessage() {}

func (x *PSQL) ProtoReflect() protoreflect.Message {
	mi := &file_api_config_config_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PSQL.ProtoReflect.Descriptor instead.
func (*PSQL) Descriptor() ([]byte, []int) {
	return file_api_config_config_proto_rawDescGZIP(), []int{8}
}

func (x *PSQL) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *PSQL) GetDsn() string {
	if x != nil {
		return x.Dsn
	}
	return ""
}

func (x *PSQL) GetSlowThreshold() *durationpb.Duration {
	if x != nil {
		return x.SlowThreshold
	}
	return nil
}

func (x *PSQL) GetLoggerEnable() bool {
	if x != nil {
		return x.LoggerEnable
	}
	return false
}

func (x *PSQL) GetLoggerColorful() bool {
	if x != nil {
		return x.LoggerColorful
	}
	return false
}

func (x *PSQL) GetLoggerLevel() string {
	if x != nil {
		return x.LoggerLevel
	}
	return ""
}

func (x *PSQL) GetConnMaxActive() uint32 {
	if x != nil {
		return x.ConnMaxActive
	}
	return 0
}

func (x *PSQL) GetConnMaxLifetime() *durationpb.Duration {
	if x != nil {
		return x.ConnMaxLifetime
	}
	return nil
}

func (x *PSQL) GetConnMaxIdle() uint32 {
	if x != nil {
		return x.ConnMaxIdle
	}
	return 0
}

func (x *PSQL) GetConnMaxIdleTime() *durationpb.Duration {
	if x != nil {
		return x.ConnMaxIdleTime
	}
	return nil
}

// Consul consul
type Consul struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable             bool                 `protobuf:"varint,100,opt,name=enable,proto3" json:"enable,omitempty"`
	Scheme             string               `protobuf:"bytes,1,opt,name=scheme,proto3" json:"scheme,omitempty"`
	Address            string               `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	PathPrefix         string               `protobuf:"bytes,3,opt,name=path_prefix,json=pathPrefix,proto3" json:"path_prefix,omitempty"`
	Datacenter         string               `protobuf:"bytes,4,opt,name=datacenter,proto3" json:"datacenter,omitempty"`
	WaitTime           *durationpb.Duration `protobuf:"bytes,5,opt,name=wait_time,json=waitTime,proto3" json:"wait_time,omitempty"` // (s)
	Token              string               `protobuf:"bytes,6,opt,name=token,proto3" json:"token,omitempty"`
	Namespace          string               `protobuf:"bytes,7,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Partition          string               `protobuf:"bytes,8,opt,name=partition,proto3" json:"partition,omitempty"`
	WithHttpBasicAuth  bool                 `protobuf:"varint,9,opt,name=with_http_basic_auth,json=withHttpBasicAuth,proto3" json:"with_http_basic_auth,omitempty"`
	AuthUsername       string               `protobuf:"bytes,10,opt,name=auth_username,json=authUsername,proto3" json:"auth_username,omitempty"`
	AuthPassword       string               `protobuf:"bytes,11,opt,name=auth_password,json=authPassword,proto3" json:"auth_password,omitempty"`
	InsecureSkipVerify bool                 `protobuf:"varint,12,opt,name=insecure_skip_verify,json=insecureSkipVerify,proto3" json:"insecure_skip_verify,omitempty"`
	TlsAddress         string               `protobuf:"bytes,13,opt,name=tls_address,json=tlsAddress,proto3" json:"tls_address,omitempty"`
	TlsCaPem           string               `protobuf:"bytes,14,opt,name=tls_ca_pem,json=tlsCaPem,proto3" json:"tls_ca_pem,omitempty"`
	TlsCertPem         string               `protobuf:"bytes,15,opt,name=tls_cert_pem,json=tlsCertPem,proto3" json:"tls_cert_pem,omitempty"`
	TlsKeyPem          string               `protobuf:"bytes,16,opt,name=tls_key_pem,json=tlsKeyPem,proto3" json:"tls_key_pem,omitempty"`
}

func (x *Consul) Reset() {
	*x = Consul{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_config_config_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Consul) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Consul) ProtoMessage() {}

func (x *Consul) ProtoReflect() protoreflect.Message {
	mi := &file_api_config_config_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Consul.ProtoReflect.Descriptor instead.
func (*Consul) Descriptor() ([]byte, []int) {
	return file_api_config_config_proto_rawDescGZIP(), []int{9}
}

func (x *Consul) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *Consul) GetScheme() string {
	if x != nil {
		return x.Scheme
	}
	return ""
}

func (x *Consul) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Consul) GetPathPrefix() string {
	if x != nil {
		return x.PathPrefix
	}
	return ""
}

func (x *Consul) GetDatacenter() string {
	if x != nil {
		return x.Datacenter
	}
	return ""
}

func (x *Consul) GetWaitTime() *durationpb.Duration {
	if x != nil {
		return x.WaitTime
	}
	return nil
}

func (x *Consul) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *Consul) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *Consul) GetPartition() string {
	if x != nil {
		return x.Partition
	}
	return ""
}

func (x *Consul) GetWithHttpBasicAuth() bool {
	if x != nil {
		return x.WithHttpBasicAuth
	}
	return false
}

func (x *Consul) GetAuthUsername() string {
	if x != nil {
		return x.AuthUsername
	}
	return ""
}

func (x *Consul) GetAuthPassword() string {
	if x != nil {
		return x.AuthPassword
	}
	return ""
}

func (x *Consul) GetInsecureSkipVerify() bool {
	if x != nil {
		return x.InsecureSkipVerify
	}
	return false
}

func (x *Consul) GetTlsAddress() string {
	if x != nil {
		return x.TlsAddress
	}
	return ""
}

func (x *Consul) GetTlsCaPem() string {
	if x != nil {
		return x.TlsCaPem
	}
	return ""
}

func (x *Consul) GetTlsCertPem() string {
	if x != nil {
		return x.TlsCertPem
	}
	return ""
}

func (x *Consul) GetTlsKeyPem() string {
	if x != nil {
		return x.TlsKeyPem
	}
	return ""
}

type Etcd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Endpoints          []string             `protobuf:"bytes,1,rep,name=endpoints,proto3" json:"endpoints,omitempty"`
	Username           string               `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Password           string               `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	DialTimeout        *durationpb.Duration `protobuf:"bytes,4,opt,name=dial_timeout,json=dialTimeout,proto3" json:"dial_timeout,omitempty"` // (s)
	CaCert             []byte               `protobuf:"bytes,5,opt,name=ca_cert,json=caCert,proto3" json:"ca_cert,omitempty"`
	InsecureSkipVerify bool                 `protobuf:"varint,6,opt,name=insecure_skip_verify,json=insecureSkipVerify,proto3" json:"insecure_skip_verify,omitempty"`
}

func (x *Etcd) Reset() {
	*x = Etcd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_config_config_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Etcd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Etcd) ProtoMessage() {}

func (x *Etcd) ProtoReflect() protoreflect.Message {
	mi := &file_api_config_config_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Etcd.ProtoReflect.Descriptor instead.
func (*Etcd) Descriptor() ([]byte, []int) {
	return file_api_config_config_proto_rawDescGZIP(), []int{10}
}

func (x *Etcd) GetEndpoints() []string {
	if x != nil {
		return x.Endpoints
	}
	return nil
}

func (x *Etcd) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Etcd) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Etcd) GetDialTimeout() *durationpb.Duration {
	if x != nil {
		return x.DialTimeout
	}
	return nil
}

func (x *Etcd) GetCaCert() []byte {
	if x != nil {
		return x.CaCert
	}
	return nil
}

func (x *Etcd) GetInsecureSkipVerify() bool {
	if x != nil {
		return x.InsecureSkipVerify
	}
	return false
}

// Jaeger jaeger
type Jaeger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable     bool                 `protobuf:"varint,100,opt,name=enable,proto3" json:"enable,omitempty"`
	Kind       string               `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"` // value: grpc、http
	Addr       string               `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`
	IsInsecure bool                 `protobuf:"varint,3,opt,name=is_insecure,json=isInsecure,proto3" json:"is_insecure,omitempty"`
	Timeout    *durationpb.Duration `protobuf:"bytes,4,opt,name=timeout,proto3" json:"timeout,omitempty"` // (s)
}

func (x *Jaeger) Reset() {
	*x = Jaeger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_config_config_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Jaeger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Jaeger) ProtoMessage() {}

func (x *Jaeger) ProtoReflect() protoreflect.Message {
	mi := &file_api_config_config_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Jaeger.ProtoReflect.Descriptor instead.
func (*Jaeger) Descriptor() ([]byte, []int) {
	return file_api_config_config_proto_rawDescGZIP(), []int{11}
}

func (x *Jaeger) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *Jaeger) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *Jaeger) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *Jaeger) GetIsInsecure() bool {
	if x != nil {
		return x.IsInsecure
	}
	return false
}

func (x *Jaeger) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

// RabbitMQ rabbitmq
type Rabbitmq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable     bool   `protobuf:"varint,100,opt,name=enable,proto3" json:"enable,omitempty"`
	Url        string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	TlsAddress string `protobuf:"bytes,2,opt,name=tls_address,json=tlsAddress,proto3" json:"tls_address,omitempty"`
	TlsCaPem   string `protobuf:"bytes,3,opt,name=tls_ca_pem,json=tlsCaPem,proto3" json:"tls_ca_pem,omitempty"`
	TlsCertPem string `protobuf:"bytes,4,opt,name=tls_cert_pem,json=tlsCertPem,proto3" json:"tls_cert_pem,omitempty"`
	TlsKeyPem  string `protobuf:"bytes,5,opt,name=tls_key_pem,json=tlsKeyPem,proto3" json:"tls_key_pem,omitempty"`
}

func (x *Rabbitmq) Reset() {
	*x = Rabbitmq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_config_config_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rabbitmq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rabbitmq) ProtoMessage() {}

func (x *Rabbitmq) ProtoReflect() protoreflect.Message {
	mi := &file_api_config_config_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rabbitmq.ProtoReflect.Descriptor instead.
func (*Rabbitmq) Descriptor() ([]byte, []int) {
	return file_api_config_config_proto_rawDescGZIP(), []int{12}
}

func (x *Rabbitmq) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *Rabbitmq) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Rabbitmq) GetTlsAddress() string {
	if x != nil {
		return x.TlsAddress
	}
	return ""
}

func (x *Rabbitmq) GetTlsCaPem() string {
	if x != nil {
		return x.TlsCaPem
	}
	return ""
}

func (x *Rabbitmq) GetTlsCertPem() string {
	if x != nil {
		return x.TlsCertPem
	}
	return ""
}

func (x *Rabbitmq) GetTlsKeyPem() string {
	if x != nil {
		return x.TlsKeyPem
	}
	return ""
}

type Encrypt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransferEncrypt *Encrypt_TransferEncrypt `protobuf:"bytes,1,opt,name=transfer_encrypt,json=transferEncrypt,proto3" json:"transfer_encrypt,omitempty"`
	ServiceEncrypt  *Encrypt_ServiceEncrypt  `protobuf:"bytes,2,opt,name=service_encrypt,json=serviceEncrypt,proto3" json:"service_encrypt,omitempty"`
	TokenEncrypt    *Encrypt_TokenEncrypt    `protobuf:"bytes,3,opt,name=token_encrypt,json=tokenEncrypt,proto3" json:"token_encrypt,omitempty"`
}

func (x *Encrypt) Reset() {
	*x = Encrypt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_config_config_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Encrypt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Encrypt) ProtoMessage() {}

func (x *Encrypt) ProtoReflect() protoreflect.Message {
	mi := &file_api_config_config_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Encrypt.ProtoReflect.Descriptor instead.
func (*Encrypt) Descriptor() ([]byte, []int) {
	return file_api_config_config_proto_rawDescGZIP(), []int{13}
}

func (x *Encrypt) GetTransferEncrypt() *Encrypt_TransferEncrypt {
	if x != nil {
		return x.TransferEncrypt
	}
	return nil
}

func (x *Encrypt) GetServiceEncrypt() *Encrypt_ServiceEncrypt {
	if x != nil {
		return x.ServiceEncrypt
	}
	return nil
}

func (x *Encrypt) GetTokenEncrypt() *Encrypt_TokenEncrypt {
	if x != nil {
		return x.TokenEncrypt
	}
	return nil
}

type TransportTypeEnum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TransportTypeEnum) Reset() {
	*x = TransportTypeEnum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_config_config_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransportTypeEnum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransportTypeEnum) ProtoMessage() {}

func (x *TransportTypeEnum) ProtoReflect() protoreflect.Message {
	mi := &file_api_config_config_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransportTypeEnum.ProtoReflect.Descriptor instead.
func (*TransportTypeEnum) Descriptor() ([]byte, []int) {
	return file_api_config_config_proto_rawDescGZIP(), []int{14}
}

type RegistryTypeEnum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RegistryTypeEnum) Reset() {
	*x = RegistryTypeEnum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_config_config_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegistryTypeEnum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegistryTypeEnum) ProtoMessage() {}

func (x *RegistryTypeEnum) ProtoReflect() protoreflect.Message {
	mi := &file_api_config_config_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegistryTypeEnum.ProtoReflect.Descriptor instead.
func (*RegistryTypeEnum) Descriptor() ([]byte, []int) {
	return file_api_config_config_proto_rawDescGZIP(), []int{15}
}

// ClusterServiceApi 项目集群客户端api
type ClusterServiceApi struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceName   string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`       // 服务名称
	TransportType string `protobuf:"bytes,2,opt,name=transport_type,json=transportType,proto3" json:"transport_type,omitempty"` // 传输协议：http、grpc、...；默认: HTTP
	RegistryType  string `protobuf:"bytes,3,opt,name=registry_type,json=registryType,proto3" json:"registry_type,omitempty"`    // 注册类型：endpoint、consul、...；配置中心配置：${registry_type}；例： Bootstrap.Consul
	ServiceTarget string `protobuf:"bytes,4,opt,name=service_target,json=serviceTarget,proto3" json:"service_target,omitempty"` // 服务目标：endpoint或registry，例：http://127.0.0.1:8899、discovery:///${registry_endpoint}
}

func (x *ClusterServiceApi) Reset() {
	*x = ClusterServiceApi{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_config_config_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterServiceApi) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterServiceApi) ProtoMessage() {}

func (x *ClusterServiceApi) ProtoReflect() protoreflect.Message {
	mi := &file_api_config_config_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterServiceApi.ProtoReflect.Descriptor instead.
func (*ClusterServiceApi) Descriptor() ([]byte, []int) {
	return file_api_config_config_proto_rawDescGZIP(), []int{16}
}

func (x *ClusterServiceApi) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *ClusterServiceApi) GetTransportType() string {
	if x != nil {
		return x.TransportType
	}
	return ""
}

func (x *ClusterServiceApi) GetRegistryType() string {
	if x != nil {
		return x.RegistryType
	}
	return ""
}

func (x *ClusterServiceApi) GetServiceTarget() string {
	if x != nil {
		return x.ServiceTarget
	}
	return ""
}

// ThirdPartyApi 第三方api
type ThirdPartyApi struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	HttpHost      string `protobuf:"bytes,2,opt,name=http_host,json=httpHost,proto3" json:"http_host,omitempty"`
	GrpcHost      string `protobuf:"bytes,3,opt,name=grpc_host,json=grpcHost,proto3" json:"grpc_host,omitempty"`
	IsDebug       bool   `protobuf:"varint,4,opt,name=is_debug,json=isDebug,proto3" json:"is_debug,omitempty"`
	AccessId      string `protobuf:"bytes,5,opt,name=access_id,json=accessId,proto3" json:"access_id,omitempty"`
	AccessSecret  string `protobuf:"bytes,6,opt,name=access_secret,json=accessSecret,proto3" json:"access_secret,omitempty"`
	EncryptId     string `protobuf:"bytes,7,opt,name=encrypt_id,json=encryptId,proto3" json:"encrypt_id,omitempty"`
	EncryptSecret string `protobuf:"bytes,8,opt,name=encrypt_secret,json=encryptSecret,proto3" json:"encrypt_secret,omitempty"`
}

func (x *ThirdPartyApi) Reset() {
	*x = ThirdPartyApi{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_config_config_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThirdPartyApi) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThirdPartyApi) ProtoMessage() {}

func (x *ThirdPartyApi) ProtoReflect() protoreflect.Message {
	mi := &file_api_config_config_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThirdPartyApi.ProtoReflect.Descriptor instead.
func (*ThirdPartyApi) Descriptor() ([]byte, []int) {
	return file_api_config_config_proto_rawDescGZIP(), []int{17}
}

func (x *ThirdPartyApi) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ThirdPartyApi) GetHttpHost() string {
	if x != nil {
		return x.HttpHost
	}
	return ""
}

func (x *ThirdPartyApi) GetGrpcHost() string {
	if x != nil {
		return x.GrpcHost
	}
	return ""
}

func (x *ThirdPartyApi) GetIsDebug() bool {
	if x != nil {
		return x.IsDebug
	}
	return false
}

func (x *ThirdPartyApi) GetAccessId() string {
	if x != nil {
		return x.AccessId
	}
	return ""
}

func (x *ThirdPartyApi) GetAccessSecret() string {
	if x != nil {
		return x.AccessSecret
	}
	return ""
}

func (x *ThirdPartyApi) GetEncryptId() string {
	if x != nil {
		return x.EncryptId
	}
	return ""
}

func (x *ThirdPartyApi) GetEncryptSecret() string {
	if x != nil {
		return x.EncryptSecret
	}
	return ""
}

// Snowflake snowflake
type Snowflake struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable            bool   `protobuf:"varint,100,opt,name=enable,proto3" json:"enable,omitempty"`
	Endpoint          string `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	WithDiscovery     bool   `protobuf:"varint,2,opt,name=with_discovery,json=withDiscovery,proto3" json:"with_discovery,omitempty"`
	WithHttpBasicAuth bool   `protobuf:"varint,3,opt,name=with_http_basic_auth,json=withHttpBasicAuth,proto3" json:"with_http_basic_auth,omitempty"`
	Username          string `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`
	Password          string `protobuf:"bytes,5,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *Snowflake) Reset() {
	*x = Snowflake{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_config_config_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Snowflake) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Snowflake) ProtoMessage() {}

func (x *Snowflake) ProtoReflect() protoreflect.Message {
	mi := &file_api_config_config_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Snowflake.ProtoReflect.Descriptor instead.
func (*Snowflake) Descriptor() ([]byte, []int) {
	return file_api_config_config_proto_rawDescGZIP(), []int{18}
}

func (x *Snowflake) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *Snowflake) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *Snowflake) GetWithDiscovery() bool {
	if x != nil {
		return x.WithDiscovery
	}
	return false
}

func (x *Snowflake) GetWithHttpBasicAuth() bool {
	if x != nil {
		return x.WithHttpBasicAuth
	}
	return false
}

func (x *Snowflake) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Snowflake) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

// Captcha 验证码
type Setting_Captcha struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CaptchaLen uint32               `protobuf:"varint,1,opt,name=captcha_len,json=captchaLen,proto3" json:"captcha_len,omitempty"` // 验证码长度
	CaptchaTtl *durationpb.Duration `protobuf:"bytes,2,opt,name=captcha_ttl,json=captchaTtl,proto3" json:"captcha_ttl,omitempty"`  // 验证码有效时间(s)
}

func (x *Setting_Captcha) Reset() {
	*x = Setting_Captcha{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_config_config_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Setting_Captcha) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Setting_Captcha) ProtoMessage() {}

func (x *Setting_Captcha) ProtoReflect() protoreflect.Message {
	mi := &file_api_config_config_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Setting_Captcha.ProtoReflect.Descriptor instead.
func (*Setting_Captcha) Descriptor() ([]byte, []int) {
	return file_api_config_config_proto_rawDescGZIP(), []int{2, 0}
}

func (x *Setting_Captcha) GetCaptchaLen() uint32 {
	if x != nil {
		return x.CaptchaLen
	}
	return 0
}

func (x *Setting_Captcha) GetCaptchaTtl() *durationpb.Duration {
	if x != nil {
		return x.CaptchaTtl
	}
	return nil
}

// Login 登录
type Setting_Login struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PasswordErrSerialTimes     uint32               `protobuf:"varint,1,opt,name=password_err_serial_times,json=passwordErrSerialTimes,proto3" json:"password_err_serial_times,omitempty"`               // 密码连续输错N次后短暂锁定账号
	PasswordErrSerialDuration  *durationpb.Duration `protobuf:"bytes,2,opt,name=password_err_serial_duration,json=passwordErrSerialDuration,proto3" json:"password_err_serial_duration,omitempty"`       // N分钟内连续输错密码(s)；默认1分钟(60s)
	PasswordErrLockDuration    *durationpb.Duration `protobuf:"bytes,3,opt,name=password_err_lock_duration,json=passwordErrLockDuration,proto3" json:"password_err_lock_duration,omitempty"`             // 密码连续错误后,锁定N分钟后重试(s)
	PasswordErrDailyLimitTimes uint32               `protobuf:"varint,4,opt,name=password_err_daily_limit_times,json=passwordErrDailyLimitTimes,proto3" json:"password_err_daily_limit_times,omitempty"` // 当日密码错误上限
}

func (x *Setting_Login) Reset() {
	*x = Setting_Login{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_config_config_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Setting_Login) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Setting_Login) ProtoMessage() {}

func (x *Setting_Login) ProtoReflect() protoreflect.Message {
	mi := &file_api_config_config_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Setting_Login.ProtoReflect.Descriptor instead.
func (*Setting_Login) Descriptor() ([]byte, []int) {
	return file_api_config_config_proto_rawDescGZIP(), []int{2, 1}
}

func (x *Setting_Login) GetPasswordErrSerialTimes() uint32 {
	if x != nil {
		return x.PasswordErrSerialTimes
	}
	return 0
}

func (x *Setting_Login) GetPasswordErrSerialDuration() *durationpb.Duration {
	if x != nil {
		return x.PasswordErrSerialDuration
	}
	return nil
}

func (x *Setting_Login) GetPasswordErrLockDuration() *durationpb.Duration {
	if x != nil {
		return x.PasswordErrLockDuration
	}
	return nil
}

func (x *Setting_Login) GetPasswordErrDailyLimitTimes() uint32 {
	if x != nil {
		return x.PasswordErrDailyLimitTimes
	}
	return 0
}

// HTTP http服务配置
type Server_HTTP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable  bool                 `protobuf:"varint,100,opt,name=enable,proto3" json:"enable,omitempty"` // 是否启动
	Network string               `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`  // 网络
	Addr    string               `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`        // 地址
	Timeout *durationpb.Duration `protobuf:"bytes,3,opt,name=timeout,proto3" json:"timeout,omitempty"`  // 超时时间(s)
}

func (x *Server_HTTP) Reset() {
	*x = Server_HTTP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_config_config_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Server_HTTP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Server_HTTP) ProtoMessage() {}

func (x *Server_HTTP) ProtoReflect() protoreflect.Message {
	mi := &file_api_config_config_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Server_HTTP.ProtoReflect.Descriptor instead.
func (*Server_HTTP) Descriptor() ([]byte, []int) {
	return file_api_config_config_proto_rawDescGZIP(), []int{3, 0}
}

func (x *Server_HTTP) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *Server_HTTP) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *Server_HTTP) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *Server_HTTP) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

// GRPC grpc服务配置
type Server_GRPC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable  bool                 `protobuf:"varint,100,opt,name=enable,proto3" json:"enable,omitempty"` // 是否启动
	Network string               `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`  // 网络
	Addr    string               `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`        // 地址
	Timeout *durationpb.Duration `protobuf:"bytes,3,opt,name=timeout,proto3" json:"timeout,omitempty"`  // 超时时间(s)
}

func (x *Server_GRPC) Reset() {
	*x = Server_GRPC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_config_config_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Server_GRPC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Server_GRPC) ProtoMessage() {}

func (x *Server_GRPC) ProtoReflect() protoreflect.Message {
	mi := &file_api_config_config_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Server_GRPC.ProtoReflect.Descriptor instead.
func (*Server_GRPC) Descriptor() ([]byte, []int) {
	return file_api_config_config_proto_rawDescGZIP(), []int{3, 1}
}

func (x *Server_GRPC) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *Server_GRPC) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *Server_GRPC) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *Server_GRPC) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

// Console 输出到控制台
type Log_Console struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable bool   `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"` // 是否启用
	Level  string `protobuf:"bytes,2,opt,name=level,proto3" json:"level,omitempty"`    // 日志级别；DEBUG、INFO、WARN、ERROR、FATAL
}

func (x *Log_Console) Reset() {
	*x = Log_Console{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_config_config_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Log_Console) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Log_Console) ProtoMessage() {}

func (x *Log_Console) ProtoReflect() protoreflect.Message {
	mi := &file_api_config_config_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Log_Console.ProtoReflect.Descriptor instead.
func (*Log_Console) Descriptor() ([]byte, []int) {
	return file_api_config_config_proto_rawDescGZIP(), []int{4, 0}
}

func (x *Log_Console) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *Log_Console) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

// File 输出到文件
type Log_File struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable         bool                 `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`                                       // 是否启用
	Level          string               `protobuf:"bytes,2,opt,name=level,proto3" json:"level,omitempty"`                                          // 日志级别；DEBUG、INFO、WARN、ERROR、FATAL
	Dir            string               `protobuf:"bytes,3,opt,name=dir,proto3" json:"dir,omitempty"`                                              // 存储目录
	Filename       string               `protobuf:"bytes,4,opt,name=filename,proto3" json:"filename,omitempty"`                                    // 文件名(默认：${filename}_app.%Y%m%d%H%M%S.log)
	RotateTime     *durationpb.Duration `protobuf:"bytes,5,opt,name=rotate_time,json=rotateTime,proto3" json:"rotate_time,omitempty"`              // 轮询规则：n久(默认：86400s # 86400s = 1天)；轮询规则：默认为：rotate_time(s)
	RotateSize     int64                `protobuf:"varint,6,opt,name=rotate_size,json=rotateSize,proto3" json:"rotate_size,omitempty"`             // 轮询规则：按文件大小(默认：52428800 # 50<<20 = 50M)；轮询规则：默认为：rotate_time
	StorageAge     *durationpb.Duration `protobuf:"bytes,7,opt,name=storage_age,json=storageAge,proto3" json:"storage_age,omitempty"`              // 存储n久(默认：2592000s = 30天)；存储规则：默认为：storage_age(s)
	StorageCounter uint32               `protobuf:"varint,8,opt,name=storage_counter,json=storageCounter,proto3" json:"storage_counter,omitempty"` // 存储：n个 或 有效期storage_age(默认：2592000s = 30天)；存储规则：默认为：storage_age
}

func (x *Log_File) Reset() {
	*x = Log_File{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_config_config_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Log_File) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Log_File) ProtoMessage() {}

func (x *Log_File) ProtoReflect() protoreflect.Message {
	mi := &file_api_config_config_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Log_File.ProtoReflect.Descriptor instead.
func (*Log_File) Descriptor() ([]byte, []int) {
	return file_api_config_config_proto_rawDescGZIP(), []int{4, 1}
}

func (x *Log_File) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *Log_File) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *Log_File) GetDir() string {
	if x != nil {
		return x.Dir
	}
	return ""
}

func (x *Log_File) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *Log_File) GetRotateTime() *durationpb.Duration {
	if x != nil {
		return x.RotateTime
	}
	return nil
}

func (x *Log_File) GetRotateSize() int64 {
	if x != nil {
		return x.RotateSize
	}
	return 0
}

func (x *Log_File) GetStorageAge() *durationpb.Duration {
	if x != nil {
		return x.StorageAge
	}
	return nil
}

func (x *Log_File) GetStorageCounter() uint32 {
	if x != nil {
		return x.StorageCounter
	}
	return 0
}

// TransferEncrypt 非对称加密传输,主要用于密码传递等,防止传递过程中明文信息被log,导致泄露
type Encrypt_TransferEncrypt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicKey  string `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	PrivateKey string `protobuf:"bytes,2,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
}

func (x *Encrypt_TransferEncrypt) Reset() {
	*x = Encrypt_TransferEncrypt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_config_config_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Encrypt_TransferEncrypt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Encrypt_TransferEncrypt) ProtoMessage() {}

func (x *Encrypt_TransferEncrypt) ProtoReflect() protoreflect.Message {
	mi := &file_api_config_config_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Encrypt_TransferEncrypt.ProtoReflect.Descriptor instead.
func (*Encrypt_TransferEncrypt) Descriptor() ([]byte, []int) {
	return file_api_config_config_proto_rawDescGZIP(), []int{13, 0}
}

func (x *Encrypt_TransferEncrypt) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

func (x *Encrypt_TransferEncrypt) GetPrivateKey() string {
	if x != nil {
		return x.PrivateKey
	}
	return ""
}

// ServiceEncrypt 非对称加密传输,主要用于服务请求鉴权,服务间的鉴权
type Encrypt_ServiceEncrypt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicKey  string `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	PrivateKey string `protobuf:"bytes,2,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
}

func (x *Encrypt_ServiceEncrypt) Reset() {
	*x = Encrypt_ServiceEncrypt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_config_config_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Encrypt_ServiceEncrypt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Encrypt_ServiceEncrypt) ProtoMessage() {}

func (x *Encrypt_ServiceEncrypt) ProtoReflect() protoreflect.Message {
	mi := &file_api_config_config_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Encrypt_ServiceEncrypt.ProtoReflect.Descriptor instead.
func (*Encrypt_ServiceEncrypt) Descriptor() ([]byte, []int) {
	return file_api_config_config_proto_rawDescGZIP(), []int{13, 1}
}

func (x *Encrypt_ServiceEncrypt) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

func (x *Encrypt_ServiceEncrypt) GetPrivateKey() string {
	if x != nil {
		return x.PrivateKey
	}
	return ""
}

// TokenEncrypt token
type Encrypt_TokenEncrypt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignKey             string               `protobuf:"bytes,1,opt,name=sign_key,json=signKey,proto3" json:"sign_key,omitempty"`
	RefreshKey          string               `protobuf:"bytes,2,opt,name=refresh_key,json=refreshKey,proto3" json:"refresh_key,omitempty"`
	AccessTokenExpire   *durationpb.Duration `protobuf:"bytes,3,opt,name=access_token_expire,json=accessTokenExpire,proto3" json:"access_token_expire,omitempty"`       // s
	RefreshTokenExpire  *durationpb.Duration `protobuf:"bytes,4,opt,name=refresh_token_expire,json=refreshTokenExpire,proto3" json:"refresh_token_expire,omitempty"`    // s
	PreviousTokenExpire *durationpb.Duration `protobuf:"bytes,5,opt,name=previous_token_expire,json=previousTokenExpire,proto3" json:"previous_token_expire,omitempty"` // s
}

func (x *Encrypt_TokenEncrypt) Reset() {
	*x = Encrypt_TokenEncrypt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_config_config_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Encrypt_TokenEncrypt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Encrypt_TokenEncrypt) ProtoMessage() {}

func (x *Encrypt_TokenEncrypt) ProtoReflect() protoreflect.Message {
	mi := &file_api_config_config_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Encrypt_TokenEncrypt.ProtoReflect.Descriptor instead.
func (*Encrypt_TokenEncrypt) Descriptor() ([]byte, []int) {
	return file_api_config_config_proto_rawDescGZIP(), []int{13, 2}
}

func (x *Encrypt_TokenEncrypt) GetSignKey() string {
	if x != nil {
		return x.SignKey
	}
	return ""
}

func (x *Encrypt_TokenEncrypt) GetRefreshKey() string {
	if x != nil {
		return x.RefreshKey
	}
	return ""
}

func (x *Encrypt_TokenEncrypt) GetAccessTokenExpire() *durationpb.Duration {
	if x != nil {
		return x.AccessTokenExpire
	}
	return nil
}

func (x *Encrypt_TokenEncrypt) GetRefreshTokenExpire() *durationpb.Duration {
	if x != nil {
		return x.RefreshTokenExpire
	}
	return nil
}

func (x *Encrypt_TokenEncrypt) GetPreviousTokenExpire() *durationpb.Duration {
	if x != nil {
		return x.PreviousTokenExpire
	}
	return nil
}

var File_api_config_config_proto protoreflect.FileDescriptor

var file_api_config_config_proto_rawDesc = []byte{
	0x0a, 0x17, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x6b, 0x69, 0x74, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xd0, 0x06, 0x0a, 0x09, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61,
	0x70, 0x12, 0x26, 0x0a, 0x03, 0x61, 0x70, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x6b, 0x69, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73,
	0x2e, 0x41, 0x70, 0x70, 0x52, 0x03, 0x61, 0x70, 0x70, 0x12, 0x32, 0x0a, 0x07, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6b, 0x69, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x2f, 0x0a,
	0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x6b, 0x69, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x27,
	0x0a, 0x03, 0x6c, 0x6f, 0x67, 0x18, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6b,
	0x69, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2e, 0x4c,
	0x6f, 0x67, 0x52, 0x03, 0x6c, 0x6f, 0x67, 0x12, 0x2d, 0x0a, 0x05, 0x6d, 0x79, 0x73, 0x71, 0x6c,
	0x18, 0xad, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6b, 0x69, 0x74, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2e, 0x4d, 0x79, 0x53, 0x51, 0x4c, 0x52,
	0x05, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x12, 0x2a, 0x0a, 0x04, 0x70, 0x73, 0x71, 0x6c, 0x18, 0xae,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6b, 0x69, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2e, 0x50, 0x53, 0x51, 0x4c, 0x52, 0x04, 0x70, 0x73,
	0x71, 0x6c, 0x12, 0x2d, 0x0a, 0x05, 0x72, 0x65, 0x64, 0x69, 0x73, 0x18, 0xaf, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6b, 0x69, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x73, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x52, 0x05, 0x72, 0x65, 0x64, 0x69,
	0x73, 0x12, 0x36, 0x0a, 0x08, 0x72, 0x61, 0x62, 0x62, 0x69, 0x74, 0x6d, 0x71, 0x18, 0xb0, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6b, 0x69, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2e, 0x52, 0x61, 0x62, 0x62, 0x69, 0x74, 0x6d, 0x71, 0x52,
	0x08, 0x72, 0x61, 0x62, 0x62, 0x69, 0x74, 0x6d, 0x71, 0x12, 0x30, 0x0a, 0x06, 0x63, 0x6f, 0x6e,
	0x73, 0x75, 0x6c, 0x18, 0xb1, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6b, 0x69, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2e, 0x43, 0x6f, 0x6e,
	0x73, 0x75, 0x6c, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x12, 0x2a, 0x0a, 0x04, 0x65,
	0x74, 0x63, 0x64, 0x18, 0xb2, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6b, 0x69, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2e, 0x45, 0x74, 0x63,
	0x64, 0x52, 0x04, 0x65, 0x74, 0x63, 0x64, 0x12, 0x30, 0x0a, 0x06, 0x6a, 0x61, 0x65, 0x67, 0x65,
	0x72, 0x18, 0xb3, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6b, 0x69, 0x74, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2e, 0x4a, 0x61, 0x65, 0x67, 0x65,
	0x72, 0x52, 0x06, 0x6a, 0x61, 0x65, 0x67, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x05, 0x6d, 0x6f, 0x6e,
	0x67, 0x6f, 0x18, 0xb4, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6b, 0x69, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2e, 0x4d, 0x6f, 0x6e, 0x67,
	0x6f, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x67, 0x6f, 0x12, 0x33, 0x0a, 0x07, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x18, 0x91, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6b, 0x69, 0x74,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2e, 0x45, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x52, 0x07, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x12, 0x53, 0x0a,
	0x13, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x61, 0x70, 0x69, 0x18, 0xf5, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6b, 0x69,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2e, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x70, 0x69, 0x52,
	0x11, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41,
	0x70, 0x69, 0x12, 0x47, 0x0a, 0x0f, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x79, 0x5f, 0x61, 0x70, 0x69, 0x18, 0xf6, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6b,
	0x69, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2e, 0x54,
	0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x41, 0x70, 0x69, 0x52, 0x0d, 0x74, 0x68,
	0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x41, 0x70, 0x69, 0x12, 0x39, 0x0a, 0x09, 0x73,
	0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61, 0x6b, 0x65, 0x18, 0xda, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x6b, 0x69, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x73, 0x2e, 0x53, 0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61, 0x6b, 0x65, 0x52, 0x09, 0x73, 0x6e, 0x6f,
	0x77, 0x66, 0x6c, 0x61, 0x6b, 0x65, 0x22, 0xd6, 0x04, 0x0a, 0x03, 0x41, 0x70, 0x70, 0x12, 0x2a,
	0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0b, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x65,
	0x6e, 0x76, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x6e, 0x76, 0x12, 0x2e, 0x0a, 0x0e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0d, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x28, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x12, 0x35, 0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x18, 0x29, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x61, 0x74, 0x68, 0x46, 0x6f,
	0x72, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x12, 0x33, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x50, 0x61, 0x74, 0x68, 0x46, 0x6f, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x2d, 0x0a,
	0x12, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x18, 0x3c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x29, 0x0a, 0x10,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73,
	0x18, 0x3d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x3e, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x73, 0x12, 0x3e, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x64,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6b, 0x69, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2e, 0x41, 0x70, 0x70, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xd5, 0x06, 0x0a, 0x07, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x34, 0x0a, 0x16, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6d, 0x69, 0x64, 0x64, 0x6c,
	0x65, 0x77, 0x61, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72,
	0x65, 0x12, 0x30, 0x0a, 0x14, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6a, 0x61, 0x65, 0x67,
	0x65, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x12, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4a, 0x61, 0x65, 0x67, 0x65, 0x72, 0x54, 0x72, 0x61,
	0x63, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x16, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f,
	0x6e, 0x73, 0x75, 0x6c, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x14, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75,
	0x6c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x62, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x69, 0x67, 0x72,
	0x61, 0x74, 0x65, 0x44, 0x62, 0x12, 0x30, 0x0a, 0x14, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x12, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x36, 0x0a, 0x17, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x73, 0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61, 0x6b, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x53, 0x6e, 0x6f, 0x77, 0x66, 0x6c, 0x61, 0x6b, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x12,
	0x3a, 0x0a, 0x07, 0x63, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x6b, 0x69, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x63,
	0x68, 0x61, 0x52, 0x07, 0x63, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x12, 0x35, 0x0a, 0x05, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x18, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6b, 0x69,
	0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x05, 0x6c, 0x6f, 0x67,
	0x69, 0x6e, 0x1a, 0x66, 0x0a, 0x07, 0x43, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x63, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x4c, 0x65, 0x6e, 0x12, 0x3a,
	0x0a, 0x0b, 0x63, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x5f, 0x74, 0x74, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a,
	0x63, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x54, 0x74, 0x6c, 0x1a, 0xba, 0x02, 0x0a, 0x05, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x12, 0x39, 0x0a, 0x19, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x5f, 0x65, 0x72, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x45, 0x72, 0x72, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12,
	0x5a, 0x0a, 0x1c, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x65, 0x72, 0x72, 0x5f,
	0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x19, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x45, 0x72, 0x72, 0x53, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x56, 0x0a, 0x1a, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x65, 0x72, 0x72, 0x5f, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x17, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x45, 0x72, 0x72, 0x4c, 0x6f, 0x63, 0x6b, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x1e, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f,
	0x65, 0x72, 0x72, 0x5f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x45, 0x72, 0x72, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x22, 0x86, 0x03, 0x0a, 0x06, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x12, 0x30, 0x0a, 0x04, 0x68, 0x74, 0x74, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x6b, 0x69, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x52, 0x04,
	0x68, 0x74, 0x74, 0x70, 0x12, 0x30, 0x0a, 0x04, 0x67, 0x72, 0x70, 0x63, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6b, 0x69, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x52, 0x50, 0x43,
	0x52, 0x04, 0x67, 0x72, 0x70, 0x63, 0x1a, 0x8a, 0x01, 0x0a, 0x04, 0x48, 0x54, 0x54, 0x50, 0x12,
	0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x12, 0x1b, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x33,
	0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x1a, 0x8a, 0x01, 0x0a, 0x04, 0x47, 0x52, 0x50, 0x43, 0x12, 0x16, 0x0a, 0x06,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x1b,
	0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x33, 0x0a, 0x07, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x22, 0xb2, 0x04, 0x0a, 0x03, 0x4c, 0x6f, 0x67, 0x12, 0x36, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x73,
	0x6f, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6b, 0x69, 0x74, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2e, 0x4c, 0x6f, 0x67, 0x2e,
	0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65,
	0x12, 0x2d, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x6b, 0x69, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73,
	0x2e, 0x4c, 0x6f, 0x67, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12,
	0x2d, 0x0a, 0x04, 0x67, 0x6f, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x6b, 0x69, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2e,
	0x4c, 0x6f, 0x67, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x04, 0x67, 0x6f, 0x72, 0x6d, 0x12, 0x35,
	0x0a, 0x08, 0x72, 0x61, 0x62, 0x62, 0x69, 0x74, 0x6d, 0x71, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x6b, 0x69, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x73, 0x2e, 0x4c, 0x6f, 0x67, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x08, 0x72, 0x61, 0x62,
	0x62, 0x69, 0x74, 0x6d, 0x71, 0x1a, 0x37, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x1a, 0xa4,
	0x02, 0x0a, 0x04, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x69, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x64, 0x69, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x0b, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x3a, 0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x67, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x41, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x0f,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x22, 0xc8, 0x03, 0x0a, 0x05, 0x4d, 0x79, 0x53, 0x51, 0x4c, 0x12,
	0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x03, 0x64, 0x73, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x03, 0x64,
	0x73, 0x6e, 0x12, 0x40, 0x0a, 0x0e, 0x73, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x6c, 0x6f, 0x77, 0x54, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6c, 0x6f, 0x67,
	0x67, 0x65, 0x72, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6c, 0x6f, 0x67,
	0x67, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x66, 0x75, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x66,
	0x75, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x5f, 0x6d, 0x61,
	0x78, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x63, 0x6f, 0x6e, 0x6e, 0x4d, 0x61, 0x78, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x45, 0x0a,
	0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x4d, 0x61, 0x78, 0x4c, 0x69, 0x66, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x5f, 0x6d, 0x61, 0x78,
	0x5f, 0x69, 0x64, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x6e, 0x4d, 0x61, 0x78, 0x49, 0x64, 0x6c, 0x65, 0x12, 0x46, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x6e,
	0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x4d, 0x61, 0x78, 0x49, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0xd2, 0x04, 0x0a, 0x05, 0x4d, 0x6f, 0x6e, 0x67, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x05, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x61, 0x78,
	0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x6d, 0x61, 0x78, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a,
	0x0d, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x42, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x33, 0x0a, 0x07,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x12, 0x48, 0x0a, 0x12, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62,
	0x65, 0x61, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x46, 0x0a, 0x12, 0x6d,
	0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x5f, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x6e, 0x49, 0x64, 0x6c, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0e, 0x73, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x6c, 0x6f, 0x77, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x22, 0xc0, 0x04, 0x0a, 0x05, 0x52, 0x65, 0x64, 0x69, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x0e, 0x0a,
	0x02, 0x64, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x64, 0x62, 0x12, 0x3c, 0x0a,
	0x0c, 0x64, 0x69, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b,
	0x64, 0x69, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x3c, 0x0a, 0x0c, 0x72,
	0x65, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x72, 0x65,
	0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x3e, 0x0a, 0x0d, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6f, 0x6e,
	0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x4d, 0x61, 0x78, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x12, 0x45, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x69,
	0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x4d, 0x61, 0x78,
	0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e,
	0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x64, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x4d, 0x61, 0x78, 0x49, 0x64, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0d,
	0x63, 0x6f, 0x6e, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x6c, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x4d, 0x69, 0x6e, 0x49, 0x64, 0x6c, 0x65,
	0x12, 0x46, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x64, 0x6c,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x4d, 0x61, 0x78,
	0x49, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xbe, 0x03, 0x0a, 0x04, 0x50, 0x53, 0x51,
	0x4c, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x73, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x73, 0x6e, 0x12, 0x40, 0x0a, 0x0e, 0x73,
	0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d,
	0x73, 0x6c, 0x6f, 0x77, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x66, 0x75, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x6c, 0x6f, 0x67,
	0x67, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x66, 0x75, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x6c,
	0x6f, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x26,
	0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x4d, 0x61, 0x78,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x45, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x5f, 0x6d,
	0x61, 0x78, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x63, 0x6f,
	0x6e, 0x6e, 0x4d, 0x61, 0x78, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a,
	0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x64, 0x6c, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x4d, 0x61, 0x78, 0x49, 0x64, 0x6c,
	0x65, 0x12, 0x46, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x64,
	0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x4d, 0x61,
	0x78, 0x49, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xcb, 0x04, 0x0a, 0x06, 0x43, 0x6f,
	0x6e, 0x73, 0x75, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x64,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x74, 0x68, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12,
	0x1e, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x12,
	0x36, 0x0a, 0x09, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x77,
	0x61, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1c, 0x0a,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x14, 0x77, 0x69, 0x74,
	0x68, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x61, 0x75, 0x74,
	0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x77, 0x69, 0x74, 0x68, 0x48, 0x74, 0x74,
	0x70, 0x42, 0x61, 0x73, 0x69, 0x63, 0x41, 0x75, 0x74, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x75,
	0x74, 0x68, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65,
	0x5f, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x12, 0x69, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x53, 0x6b, 0x69, 0x70,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6c, 0x73, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x6c, 0x73,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x0a, 0x74, 0x6c, 0x73, 0x5f, 0x63,
	0x61, 0x5f, 0x70, 0x65, 0x6d, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x6c, 0x73,
	0x43, 0x61, 0x50, 0x65, 0x6d, 0x12, 0x20, 0x0a, 0x0c, 0x74, 0x6c, 0x73, 0x5f, 0x63, 0x65, 0x72,
	0x74, 0x5f, 0x70, 0x65, 0x6d, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x6c, 0x73,
	0x43, 0x65, 0x72, 0x74, 0x50, 0x65, 0x6d, 0x12, 0x1e, 0x0a, 0x0b, 0x74, 0x6c, 0x73, 0x5f, 0x6b,
	0x65, 0x79, 0x5f, 0x70, 0x65, 0x6d, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6c,
	0x73, 0x4b, 0x65, 0x79, 0x50, 0x65, 0x6d, 0x22, 0xe5, 0x01, 0x0a, 0x04, 0x45, 0x74, 0x63, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x3c, 0x0a, 0x0c, 0x64, 0x69, 0x61, 0x6c, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x69, 0x61, 0x6c, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x63, 0x61, 0x43, 0x65, 0x72, 0x74, 0x12, 0x30, 0x0a,
	0x14, 0x69, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x6e, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x65, 0x53, 0x6b, 0x69, 0x70, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x22,
	0x9e, 0x01, 0x0a, 0x06, 0x4a, 0x61, 0x65, 0x67, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73,
	0x5f, 0x69, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x69, 0x73, 0x49, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x22, 0xb5, 0x01, 0x0a, 0x08, 0x52, 0x61, 0x62, 0x62, 0x69, 0x74, 0x6d, 0x71, 0x12, 0x16, 0x0a,
	0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6c, 0x73, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x6c,
	0x73, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x0a, 0x74, 0x6c, 0x73, 0x5f,
	0x63, 0x61, 0x5f, 0x70, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x6c,
	0x73, 0x43, 0x61, 0x50, 0x65, 0x6d, 0x12, 0x20, 0x0a, 0x0c, 0x74, 0x6c, 0x73, 0x5f, 0x63, 0x65,
	0x72, 0x74, 0x5f, 0x70, 0x65, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x6c,
	0x73, 0x43, 0x65, 0x72, 0x74, 0x50, 0x65, 0x6d, 0x12, 0x1e, 0x0a, 0x0b, 0x74, 0x6c, 0x73, 0x5f,
	0x6b, 0x65, 0x79, 0x5f, 0x70, 0x65, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74,
	0x6c, 0x73, 0x4b, 0x65, 0x79, 0x50, 0x65, 0x6d, 0x22, 0xd5, 0x05, 0x0a, 0x07, 0x45, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x12, 0x53, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x6b, 0x69, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73,
	0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x12, 0x50, 0x0a, 0x0f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6b, 0x69, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x73, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x0e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x12, 0x4a, 0x0a, 0x0d, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6b, 0x69, 0x74, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x73, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x2e, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x1a, 0x51, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x1a, 0x50, 0x0a, 0x0e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x1a, 0xb1, 0x02, 0x0a,
	0x0c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x69, 0x67, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x4b, 0x65, 0x79, 0x12, 0x49, 0x0a, 0x13, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x11, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x12, 0x4b, 0x0a, 0x14, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x72,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x12, 0x4d, 0x0a, 0x15, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x70, 0x72, 0x65,
	0x76, 0x69, 0x6f, 0x75, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x22, 0x49, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x45, 0x6e, 0x75, 0x6d, 0x22, 0x34, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x54, 0x54, 0x50, 0x10,
	0x01, 0x12, 0x08, 0x0a, 0x04, 0x47, 0x52, 0x50, 0x43, 0x10, 0x02, 0x22, 0x57, 0x0a, 0x10, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x22,
	0x43, 0x0a, 0x0c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0c, 0x0a, 0x08, 0x45, 0x4e, 0x44, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x0a,
	0x0a, 0x06, 0x43, 0x4f, 0x4e, 0x53, 0x55, 0x4c, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x45, 0x54,
	0x43, 0x44, 0x10, 0x03, 0x22, 0xbb, 0x01, 0x0a, 0x11, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x70, 0x69, 0x12, 0x2a, 0x0a, 0x0c, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x2e, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x22, 0x80, 0x02, 0x0a, 0x0d, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x41, 0x70, 0x69, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x74, 0x74, 0x70,
	0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x74, 0x74,
	0x70, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x68, 0x6f,
	0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x72, 0x70, 0x63, 0x48, 0x6f,
	0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x44, 0x65, 0x62, 0x75, 0x67, 0x12, 0x1b, 0x0a,
	0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x49, 0x64, 0x12, 0x25,
	0x0a, 0x0e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x22, 0xcf, 0x01, 0x0a, 0x09, 0x53, 0x6e, 0x6f, 0x77, 0x66, 0x6c,
	0x61, 0x6b, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x64, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x69, 0x74, 0x68, 0x5f,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x77, 0x69, 0x74, 0x68, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x12, 0x2f,
	0x0a, 0x14, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x62, 0x61, 0x73, 0x69,
	0x63, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x77, 0x69,
	0x74, 0x68, 0x48, 0x74, 0x74, 0x70, 0x42, 0x61, 0x73, 0x69, 0x63, 0x41, 0x75, 0x74, 0x68, 0x12,
	0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x42, 0x57, 0x0a, 0x0f, 0x6b, 0x69, 0x74, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x42, 0x0d, 0x4b, 0x69, 0x74, 0x41,
	0x70, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x50, 0x01, 0x5a, 0x33, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6b, 0x61, 0x69, 0x67, 0x75, 0x61, 0x6e,
	0x67, 0x2f, 0x67, 0x6f, 0x2d, 0x73, 0x72, 0x76, 0x2d, 0x6b, 0x69, 0x74, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x3b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x70, 0x62,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_config_config_proto_rawDescOnce sync.Once
	file_api_config_config_proto_rawDescData = file_api_config_config_proto_rawDesc
)

func file_api_config_config_proto_rawDescGZIP() []byte {
	file_api_config_config_proto_rawDescOnce.Do(func() {
		file_api_config_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_config_config_proto_rawDescData)
	})
	return file_api_config_config_proto_rawDescData
}

var file_api_config_config_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_api_config_config_proto_msgTypes = make([]protoimpl.MessageInfo, 29)
var file_api_config_config_proto_goTypes = []any{
	(TransportTypeEnum_TransportType)(0), // 0: kit.api.configs.TransportTypeEnum.TransportType
	(RegistryTypeEnum_RegistryType)(0),   // 1: kit.api.configs.RegistryTypeEnum.RegistryType
	(*Bootstrap)(nil),                    // 2: kit.api.configs.Bootstrap
	(*App)(nil),                          // 3: kit.api.configs.App
	(*Setting)(nil),                      // 4: kit.api.configs.Setting
	(*Server)(nil),                       // 5: kit.api.configs.Server
	(*Log)(nil),                          // 6: kit.api.configs.Log
	(*MySQL)(nil),                        // 7: kit.api.configs.MySQL
	(*Mongo)(nil),                        // 8: kit.api.configs.Mongo
	(*Redis)(nil),                        // 9: kit.api.configs.Redis
	(*PSQL)(nil),                         // 10: kit.api.configs.PSQL
	(*Consul)(nil),                       // 11: kit.api.configs.Consul
	(*Etcd)(nil),                         // 12: kit.api.configs.Etcd
	(*Jaeger)(nil),                       // 13: kit.api.configs.Jaeger
	(*Rabbitmq)(nil),                     // 14: kit.api.configs.Rabbitmq
	(*Encrypt)(nil),                      // 15: kit.api.configs.Encrypt
	(*TransportTypeEnum)(nil),            // 16: kit.api.configs.TransportTypeEnum
	(*RegistryTypeEnum)(nil),             // 17: kit.api.configs.RegistryTypeEnum
	(*ClusterServiceApi)(nil),            // 18: kit.api.configs.ClusterServiceApi
	(*ThirdPartyApi)(nil),                // 19: kit.api.configs.ThirdPartyApi
	(*Snowflake)(nil),                    // 20: kit.api.configs.Snowflake
	nil,                                  // 21: kit.api.configs.App.MetadataEntry
	(*Setting_Captcha)(nil),              // 22: kit.api.configs.Setting.Captcha
	(*Setting_Login)(nil),                // 23: kit.api.configs.Setting.Login
	(*Server_HTTP)(nil),                  // 24: kit.api.configs.Server.HTTP
	(*Server_GRPC)(nil),                  // 25: kit.api.configs.Server.GRPC
	(*Log_Console)(nil),                  // 26: kit.api.configs.Log.Console
	(*Log_File)(nil),                     // 27: kit.api.configs.Log.File
	(*Encrypt_TransferEncrypt)(nil),      // 28: kit.api.configs.Encrypt.TransferEncrypt
	(*Encrypt_ServiceEncrypt)(nil),       // 29: kit.api.configs.Encrypt.ServiceEncrypt
	(*Encrypt_TokenEncrypt)(nil),         // 30: kit.api.configs.Encrypt.TokenEncrypt
	(*durationpb.Duration)(nil),          // 31: google.protobuf.Duration
}
var file_api_config_config_proto_depIdxs = []int32{
	3,  // 0: kit.api.configs.Bootstrap.app:type_name -> kit.api.configs.App
	4,  // 1: kit.api.configs.Bootstrap.setting:type_name -> kit.api.configs.Setting
	5,  // 2: kit.api.configs.Bootstrap.server:type_name -> kit.api.configs.Server
	6,  // 3: kit.api.configs.Bootstrap.log:type_name -> kit.api.configs.Log
	7,  // 4: kit.api.configs.Bootstrap.mysql:type_name -> kit.api.configs.MySQL
	10, // 5: kit.api.configs.Bootstrap.psql:type_name -> kit.api.configs.PSQL
	9,  // 6: kit.api.configs.Bootstrap.redis:type_name -> kit.api.configs.Redis
	14, // 7: kit.api.configs.Bootstrap.rabbitmq:type_name -> kit.api.configs.Rabbitmq
	11, // 8: kit.api.configs.Bootstrap.consul:type_name -> kit.api.configs.Consul
	12, // 9: kit.api.configs.Bootstrap.etcd:type_name -> kit.api.configs.Etcd
	13, // 10: kit.api.configs.Bootstrap.jaeger:type_name -> kit.api.configs.Jaeger
	8,  // 11: kit.api.configs.Bootstrap.mongo:type_name -> kit.api.configs.Mongo
	15, // 12: kit.api.configs.Bootstrap.encrypt:type_name -> kit.api.configs.Encrypt
	18, // 13: kit.api.configs.Bootstrap.cluster_service_api:type_name -> kit.api.configs.ClusterServiceApi
	19, // 14: kit.api.configs.Bootstrap.third_party_api:type_name -> kit.api.configs.ThirdPartyApi
	20, // 15: kit.api.configs.Bootstrap.snowflake:type_name -> kit.api.configs.Snowflake
	21, // 16: kit.api.configs.App.metadata:type_name -> kit.api.configs.App.MetadataEntry
	22, // 17: kit.api.configs.Setting.captcha:type_name -> kit.api.configs.Setting.Captcha
	23, // 18: kit.api.configs.Setting.login:type_name -> kit.api.configs.Setting.Login
	24, // 19: kit.api.configs.Server.http:type_name -> kit.api.configs.Server.HTTP
	25, // 20: kit.api.configs.Server.grpc:type_name -> kit.api.configs.Server.GRPC
	26, // 21: kit.api.configs.Log.console:type_name -> kit.api.configs.Log.Console
	27, // 22: kit.api.configs.Log.file:type_name -> kit.api.configs.Log.File
	27, // 23: kit.api.configs.Log.gorm:type_name -> kit.api.configs.Log.File
	27, // 24: kit.api.configs.Log.rabbitmq:type_name -> kit.api.configs.Log.File
	31, // 25: kit.api.configs.MySQL.slow_threshold:type_name -> google.protobuf.Duration
	31, // 26: kit.api.configs.MySQL.conn_max_lifetime:type_name -> google.protobuf.Duration
	31, // 27: kit.api.configs.MySQL.conn_max_idle_time:type_name -> google.protobuf.Duration
	31, // 28: kit.api.configs.Mongo.connect_timeout:type_name -> google.protobuf.Duration
	31, // 29: kit.api.configs.Mongo.timeout:type_name -> google.protobuf.Duration
	31, // 30: kit.api.configs.Mongo.heartbeat_interval:type_name -> google.protobuf.Duration
	31, // 31: kit.api.configs.Mongo.max_conn_idle_time:type_name -> google.protobuf.Duration
	31, // 32: kit.api.configs.Mongo.slow_threshold:type_name -> google.protobuf.Duration
	31, // 33: kit.api.configs.Redis.dial_timeout:type_name -> google.protobuf.Duration
	31, // 34: kit.api.configs.Redis.read_timeout:type_name -> google.protobuf.Duration
	31, // 35: kit.api.configs.Redis.write_timeout:type_name -> google.protobuf.Duration
	31, // 36: kit.api.configs.Redis.conn_max_lifetime:type_name -> google.protobuf.Duration
	31, // 37: kit.api.configs.Redis.conn_max_idle_time:type_name -> google.protobuf.Duration
	31, // 38: kit.api.configs.PSQL.slow_threshold:type_name -> google.protobuf.Duration
	31, // 39: kit.api.configs.PSQL.conn_max_lifetime:type_name -> google.protobuf.Duration
	31, // 40: kit.api.configs.PSQL.conn_max_idle_time:type_name -> google.protobuf.Duration
	31, // 41: kit.api.configs.Consul.wait_time:type_name -> google.protobuf.Duration
	31, // 42: kit.api.configs.Etcd.dial_timeout:type_name -> google.protobuf.Duration
	31, // 43: kit.api.configs.Jaeger.timeout:type_name -> google.protobuf.Duration
	28, // 44: kit.api.configs.Encrypt.transfer_encrypt:type_name -> kit.api.configs.Encrypt.TransferEncrypt
	29, // 45: kit.api.configs.Encrypt.service_encrypt:type_name -> kit.api.configs.Encrypt.ServiceEncrypt
	30, // 46: kit.api.configs.Encrypt.token_encrypt:type_name -> kit.api.configs.Encrypt.TokenEncrypt
	31, // 47: kit.api.configs.Setting.Captcha.captcha_ttl:type_name -> google.protobuf.Duration
	31, // 48: kit.api.configs.Setting.Login.password_err_serial_duration:type_name -> google.protobuf.Duration
	31, // 49: kit.api.configs.Setting.Login.password_err_lock_duration:type_name -> google.protobuf.Duration
	31, // 50: kit.api.configs.Server.HTTP.timeout:type_name -> google.protobuf.Duration
	31, // 51: kit.api.configs.Server.GRPC.timeout:type_name -> google.protobuf.Duration
	31, // 52: kit.api.configs.Log.File.rotate_time:type_name -> google.protobuf.Duration
	31, // 53: kit.api.configs.Log.File.storage_age:type_name -> google.protobuf.Duration
	31, // 54: kit.api.configs.Encrypt.TokenEncrypt.access_token_expire:type_name -> google.protobuf.Duration
	31, // 55: kit.api.configs.Encrypt.TokenEncrypt.refresh_token_expire:type_name -> google.protobuf.Duration
	31, // 56: kit.api.configs.Encrypt.TokenEncrypt.previous_token_expire:type_name -> google.protobuf.Duration
	57, // [57:57] is the sub-list for method output_type
	57, // [57:57] is the sub-list for method input_type
	57, // [57:57] is the sub-list for extension type_name
	57, // [57:57] is the sub-list for extension extendee
	0,  // [0:57] is the sub-list for field type_name
}

func init() { file_api_config_config_proto_init() }
func file_api_config_config_proto_init() {
	if File_api_config_config_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_config_config_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Bootstrap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_config_config_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*App); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_config_config_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*Setting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_config_config_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*Server); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_config_config_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*Log); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_config_config_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*MySQL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_config_config_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*Mongo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_config_config_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*Redis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_config_config_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*PSQL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_config_config_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*Consul); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_config_config_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*Etcd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_config_config_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*Jaeger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_config_config_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*Rabbitmq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_config_config_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*Encrypt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_config_config_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*TransportTypeEnum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_config_config_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*RegistryTypeEnum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_config_config_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*ClusterServiceApi); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_config_config_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*ThirdPartyApi); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_config_config_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*Snowflake); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_config_config_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*Setting_Captcha); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_config_config_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*Setting_Login); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_config_config_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*Server_HTTP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_config_config_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*Server_GRPC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_config_config_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*Log_Console); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_config_config_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*Log_File); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_config_config_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*Encrypt_TransferEncrypt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_config_config_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*Encrypt_ServiceEncrypt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_config_config_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*Encrypt_TokenEncrypt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_config_config_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   29,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_config_config_proto_goTypes,
		DependencyIndexes: file_api_config_config_proto_depIdxs,
		EnumInfos:         file_api_config_config_proto_enumTypes,
		MessageInfos:      file_api_config_config_proto_msgTypes,
	}.Build()
	File_api_config_config_proto = out.File
	file_api_config_config_proto_rawDesc = nil
	file_api_config_config_proto_goTypes = nil
	file_api_config_config_proto_depIdxs = nil
}
