// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/config/config.proto

package configpb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Bootstrap with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Bootstrap) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Bootstrap with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BootstrapMultiError, or nil
// if none found.
func (m *Bootstrap) ValidateAll() error {
	return m.validate(true)
}

func (m *Bootstrap) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetApp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BootstrapValidationError{
					field:  "App",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BootstrapValidationError{
					field:  "App",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetApp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BootstrapValidationError{
				field:  "App",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSetting()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BootstrapValidationError{
					field:  "Setting",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BootstrapValidationError{
					field:  "Setting",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSetting()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BootstrapValidationError{
				field:  "Setting",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetServer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BootstrapValidationError{
					field:  "Server",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BootstrapValidationError{
					field:  "Server",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetServer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BootstrapValidationError{
				field:  "Server",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLog()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BootstrapValidationError{
					field:  "Log",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BootstrapValidationError{
					field:  "Log",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLog()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BootstrapValidationError{
				field:  "Log",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMysql()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BootstrapValidationError{
					field:  "Mysql",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BootstrapValidationError{
					field:  "Mysql",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMysql()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BootstrapValidationError{
				field:  "Mysql",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPsql()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BootstrapValidationError{
					field:  "Psql",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BootstrapValidationError{
					field:  "Psql",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPsql()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BootstrapValidationError{
				field:  "Psql",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRedis()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BootstrapValidationError{
					field:  "Redis",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BootstrapValidationError{
					field:  "Redis",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRedis()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BootstrapValidationError{
				field:  "Redis",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRabbitmq()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BootstrapValidationError{
					field:  "Rabbitmq",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BootstrapValidationError{
					field:  "Rabbitmq",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRabbitmq()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BootstrapValidationError{
				field:  "Rabbitmq",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetConsul()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BootstrapValidationError{
					field:  "Consul",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BootstrapValidationError{
					field:  "Consul",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConsul()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BootstrapValidationError{
				field:  "Consul",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEtcd()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BootstrapValidationError{
					field:  "Etcd",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BootstrapValidationError{
					field:  "Etcd",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEtcd()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BootstrapValidationError{
				field:  "Etcd",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetJaeger()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BootstrapValidationError{
					field:  "Jaeger",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BootstrapValidationError{
					field:  "Jaeger",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetJaeger()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BootstrapValidationError{
				field:  "Jaeger",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMongo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BootstrapValidationError{
					field:  "Mongo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BootstrapValidationError{
					field:  "Mongo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMongo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BootstrapValidationError{
				field:  "Mongo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEncrypt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BootstrapValidationError{
					field:  "Encrypt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BootstrapValidationError{
					field:  "Encrypt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEncrypt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BootstrapValidationError{
				field:  "Encrypt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetClusterServiceApi() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BootstrapValidationError{
						field:  fmt.Sprintf("ClusterServiceApi[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BootstrapValidationError{
						field:  fmt.Sprintf("ClusterServiceApi[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BootstrapValidationError{
					field:  fmt.Sprintf("ClusterServiceApi[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetThirdPartyApi() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BootstrapValidationError{
						field:  fmt.Sprintf("ThirdPartyApi[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BootstrapValidationError{
						field:  fmt.Sprintf("ThirdPartyApi[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BootstrapValidationError{
					field:  fmt.Sprintf("ThirdPartyApi[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetSnowflake()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BootstrapValidationError{
					field:  "Snowflake",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BootstrapValidationError{
					field:  "Snowflake",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSnowflake()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BootstrapValidationError{
				field:  "Snowflake",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BootstrapMultiError(errors)
	}

	return nil
}

// BootstrapMultiError is an error wrapping multiple validation errors returned
// by Bootstrap.ValidateAll() if the designated constraints aren't met.
type BootstrapMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BootstrapMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BootstrapMultiError) AllErrors() []error { return m }

// BootstrapValidationError is the validation error returned by
// Bootstrap.Validate if the designated constraints aren't met.
type BootstrapValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BootstrapValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BootstrapValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BootstrapValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BootstrapValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BootstrapValidationError) ErrorName() string { return "BootstrapValidationError" }

// Error satisfies the builtin error interface
func (e BootstrapValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBootstrap.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BootstrapValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BootstrapValidationError{}

// Validate checks the field values on App with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *App) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on App with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in AppMultiError, or nil if none found.
func (m *App) ValidateAll() error {
	return m.validate(true)
}

func (m *App) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetProjectName()) < 1 {
		err := AppValidationError{
			field:  "ProjectName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetServerName()) < 1 {
		err := AppValidationError{
			field:  "ServerName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetServerEnv()) < 1 {
		err := AppValidationError{
			field:  "ServerEnv",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetServerVersion()) < 1 {
		err := AppValidationError{
			field:  "ServerVersion",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Id

	// no validation rules for ConfigMethod

	// no validation rules for ConfigPathForGeneral

	// no validation rules for ConfigPathForServer

	// no validation rules for Metadata

	if len(errors) > 0 {
		return AppMultiError(errors)
	}

	return nil
}

// AppMultiError is an error wrapping multiple validation errors returned by
// App.ValidateAll() if the designated constraints aren't met.
type AppMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AppMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AppMultiError) AllErrors() []error { return m }

// AppValidationError is the validation error returned by App.Validate if the
// designated constraints aren't met.
type AppValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppValidationError) ErrorName() string { return "AppValidationError" }

// Error satisfies the builtin error interface
func (e AppValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppValidationError{}

// Validate checks the field values on Setting with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Setting) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Setting with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SettingMultiError, or nil if none found.
func (m *Setting) ValidateAll() error {
	return m.validate(true)
}

func (m *Setting) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EnableAuthMiddleware

	// no validation rules for EnableJaegerTracer

	// no validation rules for EnableConsulRegistry

	// no validation rules for EnableMigrateDb

	// no validation rules for EnableScheduleTask

	// no validation rules for EnableSnowflakeWorker

	if all {
		switch v := interface{}(m.GetCaptcha()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SettingValidationError{
					field:  "Captcha",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SettingValidationError{
					field:  "Captcha",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCaptcha()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SettingValidationError{
				field:  "Captcha",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLogin()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SettingValidationError{
					field:  "Login",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SettingValidationError{
					field:  "Login",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLogin()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SettingValidationError{
				field:  "Login",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SettingMultiError(errors)
	}

	return nil
}

// SettingMultiError is an error wrapping multiple validation errors returned
// by Setting.ValidateAll() if the designated constraints aren't met.
type SettingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SettingMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SettingMultiError) AllErrors() []error { return m }

// SettingValidationError is the validation error returned by Setting.Validate
// if the designated constraints aren't met.
type SettingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SettingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SettingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SettingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SettingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SettingValidationError) ErrorName() string { return "SettingValidationError" }

// Error satisfies the builtin error interface
func (e SettingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetting.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SettingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SettingValidationError{}

// Validate checks the field values on Server with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Server) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Server with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ServerMultiError, or nil if none found.
func (m *Server) ValidateAll() error {
	return m.validate(true)
}

func (m *Server) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetHttp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServerValidationError{
					field:  "Http",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServerValidationError{
					field:  "Http",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHttp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServerValidationError{
				field:  "Http",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetGrpc()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ServerValidationError{
					field:  "Grpc",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ServerValidationError{
					field:  "Grpc",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGrpc()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServerValidationError{
				field:  "Grpc",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ServerMultiError(errors)
	}

	return nil
}

// ServerMultiError is an error wrapping multiple validation errors returned by
// Server.ValidateAll() if the designated constraints aren't met.
type ServerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerMultiError) AllErrors() []error { return m }

// ServerValidationError is the validation error returned by Server.Validate if
// the designated constraints aren't met.
type ServerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerValidationError) ErrorName() string { return "ServerValidationError" }

// Error satisfies the builtin error interface
func (e ServerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerValidationError{}

// Validate checks the field values on Log with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Log) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Log with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in LogMultiError, or nil if none found.
func (m *Log) ValidateAll() error {
	return m.validate(true)
}

func (m *Log) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetConsole()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LogValidationError{
					field:  "Console",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LogValidationError{
					field:  "Console",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConsole()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LogValidationError{
				field:  "Console",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LogValidationError{
					field:  "File",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LogValidationError{
					field:  "File",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LogValidationError{
				field:  "File",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LogMultiError(errors)
	}

	return nil
}

// LogMultiError is an error wrapping multiple validation errors returned by
// Log.ValidateAll() if the designated constraints aren't met.
type LogMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogMultiError) AllErrors() []error { return m }

// LogValidationError is the validation error returned by Log.Validate if the
// designated constraints aren't met.
type LogValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogValidationError) ErrorName() string { return "LogValidationError" }

// Error satisfies the builtin error interface
func (e LogValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLog.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogValidationError{}

// Validate checks the field values on MySQL with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MySQL) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MySQL with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MySQLMultiError, or nil if none found.
func (m *MySQL) ValidateAll() error {
	return m.validate(true)
}

func (m *MySQL) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Enable

	if utf8.RuneCountInString(m.GetDsn()) < 1 {
		err := MySQLValidationError{
			field:  "Dsn",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetSlowThreshold()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MySQLValidationError{
					field:  "SlowThreshold",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MySQLValidationError{
					field:  "SlowThreshold",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSlowThreshold()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MySQLValidationError{
				field:  "SlowThreshold",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for LoggerEnable

	// no validation rules for LoggerColorful

	// no validation rules for LoggerLevel

	// no validation rules for ConnMaxActive

	if all {
		switch v := interface{}(m.GetConnMaxLifetime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MySQLValidationError{
					field:  "ConnMaxLifetime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MySQLValidationError{
					field:  "ConnMaxLifetime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConnMaxLifetime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MySQLValidationError{
				field:  "ConnMaxLifetime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ConnMaxIdle

	if all {
		switch v := interface{}(m.GetConnMaxIdleTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MySQLValidationError{
					field:  "ConnMaxIdleTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MySQLValidationError{
					field:  "ConnMaxIdleTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConnMaxIdleTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MySQLValidationError{
				field:  "ConnMaxIdleTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MySQLMultiError(errors)
	}

	return nil
}

// MySQLMultiError is an error wrapping multiple validation errors returned by
// MySQL.ValidateAll() if the designated constraints aren't met.
type MySQLMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MySQLMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MySQLMultiError) AllErrors() []error { return m }

// MySQLValidationError is the validation error returned by MySQL.Validate if
// the designated constraints aren't met.
type MySQLValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MySQLValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MySQLValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MySQLValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MySQLValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MySQLValidationError) ErrorName() string { return "MySQLValidationError" }

// Error satisfies the builtin error interface
func (e MySQLValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMySQL.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MySQLValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MySQLValidationError{}

// Validate checks the field values on Mongo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Mongo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Mongo with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MongoMultiError, or nil if none found.
func (m *Mongo) ValidateAll() error {
	return m.validate(true)
}

func (m *Mongo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Enable

	// no validation rules for Debug

	// no validation rules for AppName

	// no validation rules for Addr

	// no validation rules for Database

	// no validation rules for MaxPoolSize

	// no validation rules for MinPoolSize

	// no validation rules for MaxConnecting

	if all {
		switch v := interface{}(m.GetConnectTimeout()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MongoValidationError{
					field:  "ConnectTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MongoValidationError{
					field:  "ConnectTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConnectTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MongoValidationError{
				field:  "ConnectTimeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTimeout()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MongoValidationError{
					field:  "Timeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MongoValidationError{
					field:  "Timeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MongoValidationError{
				field:  "Timeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetHeartbeatInterval()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MongoValidationError{
					field:  "HeartbeatInterval",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MongoValidationError{
					field:  "HeartbeatInterval",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHeartbeatInterval()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MongoValidationError{
				field:  "HeartbeatInterval",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMaxConnIdleTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MongoValidationError{
					field:  "MaxConnIdleTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MongoValidationError{
					field:  "MaxConnIdleTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMaxConnIdleTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MongoValidationError{
				field:  "MaxConnIdleTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSlowThreshold()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MongoValidationError{
					field:  "SlowThreshold",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MongoValidationError{
					field:  "SlowThreshold",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSlowThreshold()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MongoValidationError{
				field:  "SlowThreshold",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MongoMultiError(errors)
	}

	return nil
}

// MongoMultiError is an error wrapping multiple validation errors returned by
// Mongo.ValidateAll() if the designated constraints aren't met.
type MongoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MongoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MongoMultiError) AllErrors() []error { return m }

// MongoValidationError is the validation error returned by Mongo.Validate if
// the designated constraints aren't met.
type MongoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MongoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MongoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MongoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MongoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MongoValidationError) ErrorName() string { return "MongoValidationError" }

// Error satisfies the builtin error interface
func (e MongoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMongo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MongoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MongoValidationError{}

// Validate checks the field values on Redis with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Redis) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Redis with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in RedisMultiError, or nil if none found.
func (m *Redis) ValidateAll() error {
	return m.validate(true)
}

func (m *Redis) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Enable

	// no validation rules for Username

	// no validation rules for Password

	// no validation rules for Db

	if all {
		switch v := interface{}(m.GetDialTimeout()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RedisValidationError{
					field:  "DialTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RedisValidationError{
					field:  "DialTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDialTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RedisValidationError{
				field:  "DialTimeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetReadTimeout()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RedisValidationError{
					field:  "ReadTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RedisValidationError{
					field:  "ReadTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReadTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RedisValidationError{
				field:  "ReadTimeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetWriteTimeout()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RedisValidationError{
					field:  "WriteTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RedisValidationError{
					field:  "WriteTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWriteTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RedisValidationError{
				field:  "WriteTimeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ConnMaxActive

	if all {
		switch v := interface{}(m.GetConnMaxLifetime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RedisValidationError{
					field:  "ConnMaxLifetime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RedisValidationError{
					field:  "ConnMaxLifetime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConnMaxLifetime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RedisValidationError{
				field:  "ConnMaxLifetime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ConnMaxIdle

	// no validation rules for ConnMinIdle

	if all {
		switch v := interface{}(m.GetConnMaxIdleTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RedisValidationError{
					field:  "ConnMaxIdleTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RedisValidationError{
					field:  "ConnMaxIdleTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConnMaxIdleTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RedisValidationError{
				field:  "ConnMaxIdleTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RedisMultiError(errors)
	}

	return nil
}

// RedisMultiError is an error wrapping multiple validation errors returned by
// Redis.ValidateAll() if the designated constraints aren't met.
type RedisMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RedisMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RedisMultiError) AllErrors() []error { return m }

// RedisValidationError is the validation error returned by Redis.Validate if
// the designated constraints aren't met.
type RedisValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RedisValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RedisValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RedisValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RedisValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RedisValidationError) ErrorName() string { return "RedisValidationError" }

// Error satisfies the builtin error interface
func (e RedisValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRedis.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RedisValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RedisValidationError{}

// Validate checks the field values on PSQL with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *PSQL) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PSQL with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PSQLMultiError, or nil if none found.
func (m *PSQL) ValidateAll() error {
	return m.validate(true)
}

func (m *PSQL) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Enable

	// no validation rules for Dsn

	if all {
		switch v := interface{}(m.GetSlowThreshold()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PSQLValidationError{
					field:  "SlowThreshold",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PSQLValidationError{
					field:  "SlowThreshold",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSlowThreshold()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PSQLValidationError{
				field:  "SlowThreshold",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for LoggerEnable

	// no validation rules for LoggerColorful

	// no validation rules for LoggerLevel

	// no validation rules for ConnMaxActive

	if all {
		switch v := interface{}(m.GetConnMaxLifetime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PSQLValidationError{
					field:  "ConnMaxLifetime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PSQLValidationError{
					field:  "ConnMaxLifetime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConnMaxLifetime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PSQLValidationError{
				field:  "ConnMaxLifetime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ConnMaxIdle

	if all {
		switch v := interface{}(m.GetConnMaxIdleTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PSQLValidationError{
					field:  "ConnMaxIdleTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PSQLValidationError{
					field:  "ConnMaxIdleTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConnMaxIdleTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PSQLValidationError{
				field:  "ConnMaxIdleTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PSQLMultiError(errors)
	}

	return nil
}

// PSQLMultiError is an error wrapping multiple validation errors returned by
// PSQL.ValidateAll() if the designated constraints aren't met.
type PSQLMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PSQLMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PSQLMultiError) AllErrors() []error { return m }

// PSQLValidationError is the validation error returned by PSQL.Validate if the
// designated constraints aren't met.
type PSQLValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PSQLValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PSQLValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PSQLValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PSQLValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PSQLValidationError) ErrorName() string { return "PSQLValidationError" }

// Error satisfies the builtin error interface
func (e PSQLValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPSQL.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PSQLValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PSQLValidationError{}

// Validate checks the field values on Consul with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Consul) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Consul with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ConsulMultiError, or nil if none found.
func (m *Consul) ValidateAll() error {
	return m.validate(true)
}

func (m *Consul) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Enable

	// no validation rules for Scheme

	// no validation rules for Address

	// no validation rules for PathPrefix

	// no validation rules for Datacenter

	if all {
		switch v := interface{}(m.GetWaitTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConsulValidationError{
					field:  "WaitTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConsulValidationError{
					field:  "WaitTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWaitTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConsulValidationError{
				field:  "WaitTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Token

	// no validation rules for Namespace

	// no validation rules for Partition

	// no validation rules for WithHttpBasicAuth

	// no validation rules for AuthUsername

	// no validation rules for AuthPassword

	// no validation rules for InsecureSkipVerify

	// no validation rules for TlsAddress

	// no validation rules for TlsCaPem

	// no validation rules for TlsCertPem

	// no validation rules for TlsKeyPem

	if len(errors) > 0 {
		return ConsulMultiError(errors)
	}

	return nil
}

// ConsulMultiError is an error wrapping multiple validation errors returned by
// Consul.ValidateAll() if the designated constraints aren't met.
type ConsulMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConsulMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConsulMultiError) AllErrors() []error { return m }

// ConsulValidationError is the validation error returned by Consul.Validate if
// the designated constraints aren't met.
type ConsulValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConsulValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConsulValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConsulValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConsulValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConsulValidationError) ErrorName() string { return "ConsulValidationError" }

// Error satisfies the builtin error interface
func (e ConsulValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConsul.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConsulValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConsulValidationError{}

// Validate checks the field values on Etcd with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Etcd) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Etcd with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in EtcdMultiError, or nil if none found.
func (m *Etcd) ValidateAll() error {
	return m.validate(true)
}

func (m *Etcd) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	// no validation rules for Password

	if all {
		switch v := interface{}(m.GetDialTimeout()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EtcdValidationError{
					field:  "DialTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EtcdValidationError{
					field:  "DialTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDialTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EtcdValidationError{
				field:  "DialTimeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CaCert

	// no validation rules for InsecureSkipVerify

	if len(errors) > 0 {
		return EtcdMultiError(errors)
	}

	return nil
}

// EtcdMultiError is an error wrapping multiple validation errors returned by
// Etcd.ValidateAll() if the designated constraints aren't met.
type EtcdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EtcdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EtcdMultiError) AllErrors() []error { return m }

// EtcdValidationError is the validation error returned by Etcd.Validate if the
// designated constraints aren't met.
type EtcdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EtcdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EtcdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EtcdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EtcdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EtcdValidationError) ErrorName() string { return "EtcdValidationError" }

// Error satisfies the builtin error interface
func (e EtcdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEtcd.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EtcdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EtcdValidationError{}

// Validate checks the field values on Jaeger with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Jaeger) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Jaeger with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in JaegerMultiError, or nil if none found.
func (m *Jaeger) ValidateAll() error {
	return m.validate(true)
}

func (m *Jaeger) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Enable

	// no validation rules for Kind

	// no validation rules for Addr

	// no validation rules for IsInsecure

	if all {
		switch v := interface{}(m.GetTimeout()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, JaegerValidationError{
					field:  "Timeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, JaegerValidationError{
					field:  "Timeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JaegerValidationError{
				field:  "Timeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return JaegerMultiError(errors)
	}

	return nil
}

// JaegerMultiError is an error wrapping multiple validation errors returned by
// Jaeger.ValidateAll() if the designated constraints aren't met.
type JaegerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JaegerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JaegerMultiError) AllErrors() []error { return m }

// JaegerValidationError is the validation error returned by Jaeger.Validate if
// the designated constraints aren't met.
type JaegerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JaegerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JaegerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JaegerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JaegerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JaegerValidationError) ErrorName() string { return "JaegerValidationError" }

// Error satisfies the builtin error interface
func (e JaegerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJaeger.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JaegerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JaegerValidationError{}

// Validate checks the field values on Rabbitmq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Rabbitmq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Rabbitmq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RabbitmqMultiError, or nil
// if none found.
func (m *Rabbitmq) ValidateAll() error {
	return m.validate(true)
}

func (m *Rabbitmq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Enable

	// no validation rules for Url

	// no validation rules for TlsAddress

	// no validation rules for TlsCaPem

	// no validation rules for TlsCertPem

	// no validation rules for TlsKeyPem

	if len(errors) > 0 {
		return RabbitmqMultiError(errors)
	}

	return nil
}

// RabbitmqMultiError is an error wrapping multiple validation errors returned
// by Rabbitmq.ValidateAll() if the designated constraints aren't met.
type RabbitmqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RabbitmqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RabbitmqMultiError) AllErrors() []error { return m }

// RabbitmqValidationError is the validation error returned by
// Rabbitmq.Validate if the designated constraints aren't met.
type RabbitmqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RabbitmqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RabbitmqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RabbitmqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RabbitmqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RabbitmqValidationError) ErrorName() string { return "RabbitmqValidationError" }

// Error satisfies the builtin error interface
func (e RabbitmqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRabbitmq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RabbitmqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RabbitmqValidationError{}

// Validate checks the field values on Encrypt with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Encrypt) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Encrypt with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in EncryptMultiError, or nil if none found.
func (m *Encrypt) ValidateAll() error {
	return m.validate(true)
}

func (m *Encrypt) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTransferEncrypt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EncryptValidationError{
					field:  "TransferEncrypt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EncryptValidationError{
					field:  "TransferEncrypt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTransferEncrypt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EncryptValidationError{
				field:  "TransferEncrypt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetServiceEncrypt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EncryptValidationError{
					field:  "ServiceEncrypt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EncryptValidationError{
					field:  "ServiceEncrypt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetServiceEncrypt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EncryptValidationError{
				field:  "ServiceEncrypt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTokenEncrypt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EncryptValidationError{
					field:  "TokenEncrypt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EncryptValidationError{
					field:  "TokenEncrypt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTokenEncrypt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EncryptValidationError{
				field:  "TokenEncrypt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return EncryptMultiError(errors)
	}

	return nil
}

// EncryptMultiError is an error wrapping multiple validation errors returned
// by Encrypt.ValidateAll() if the designated constraints aren't met.
type EncryptMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EncryptMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EncryptMultiError) AllErrors() []error { return m }

// EncryptValidationError is the validation error returned by Encrypt.Validate
// if the designated constraints aren't met.
type EncryptValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EncryptValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EncryptValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EncryptValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EncryptValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EncryptValidationError) ErrorName() string { return "EncryptValidationError" }

// Error satisfies the builtin error interface
func (e EncryptValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEncrypt.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EncryptValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EncryptValidationError{}

// Validate checks the field values on TransportTypeEnum with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TransportTypeEnum) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransportTypeEnum with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TransportTypeEnumMultiError, or nil if none found.
func (m *TransportTypeEnum) ValidateAll() error {
	return m.validate(true)
}

func (m *TransportTypeEnum) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return TransportTypeEnumMultiError(errors)
	}

	return nil
}

// TransportTypeEnumMultiError is an error wrapping multiple validation errors
// returned by TransportTypeEnum.ValidateAll() if the designated constraints
// aren't met.
type TransportTypeEnumMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransportTypeEnumMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransportTypeEnumMultiError) AllErrors() []error { return m }

// TransportTypeEnumValidationError is the validation error returned by
// TransportTypeEnum.Validate if the designated constraints aren't met.
type TransportTypeEnumValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransportTypeEnumValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransportTypeEnumValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransportTypeEnumValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransportTypeEnumValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransportTypeEnumValidationError) ErrorName() string {
	return "TransportTypeEnumValidationError"
}

// Error satisfies the builtin error interface
func (e TransportTypeEnumValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransportTypeEnum.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransportTypeEnumValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransportTypeEnumValidationError{}

// Validate checks the field values on RegistryTypeEnum with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RegistryTypeEnum) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegistryTypeEnum with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegistryTypeEnumMultiError, or nil if none found.
func (m *RegistryTypeEnum) ValidateAll() error {
	return m.validate(true)
}

func (m *RegistryTypeEnum) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RegistryTypeEnumMultiError(errors)
	}

	return nil
}

// RegistryTypeEnumMultiError is an error wrapping multiple validation errors
// returned by RegistryTypeEnum.ValidateAll() if the designated constraints
// aren't met.
type RegistryTypeEnumMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegistryTypeEnumMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegistryTypeEnumMultiError) AllErrors() []error { return m }

// RegistryTypeEnumValidationError is the validation error returned by
// RegistryTypeEnum.Validate if the designated constraints aren't met.
type RegistryTypeEnumValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegistryTypeEnumValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegistryTypeEnumValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegistryTypeEnumValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegistryTypeEnumValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegistryTypeEnumValidationError) ErrorName() string { return "RegistryTypeEnumValidationError" }

// Error satisfies the builtin error interface
func (e RegistryTypeEnumValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegistryTypeEnum.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegistryTypeEnumValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegistryTypeEnumValidationError{}

// Validate checks the field values on ClusterServiceApi with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ClusterServiceApi) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClusterServiceApi with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ClusterServiceApiMultiError, or nil if none found.
func (m *ClusterServiceApi) ValidateAll() error {
	return m.validate(true)
}

func (m *ClusterServiceApi) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetServiceName()) < 1 {
		err := ClusterServiceApiValidationError{
			field:  "ServiceName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for TransportType

	// no validation rules for RegistryType

	if utf8.RuneCountInString(m.GetServiceTarget()) < 1 {
		err := ClusterServiceApiValidationError{
			field:  "ServiceTarget",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ClusterServiceApiMultiError(errors)
	}

	return nil
}

// ClusterServiceApiMultiError is an error wrapping multiple validation errors
// returned by ClusterServiceApi.ValidateAll() if the designated constraints
// aren't met.
type ClusterServiceApiMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClusterServiceApiMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClusterServiceApiMultiError) AllErrors() []error { return m }

// ClusterServiceApiValidationError is the validation error returned by
// ClusterServiceApi.Validate if the designated constraints aren't met.
type ClusterServiceApiValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClusterServiceApiValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClusterServiceApiValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClusterServiceApiValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClusterServiceApiValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClusterServiceApiValidationError) ErrorName() string {
	return "ClusterServiceApiValidationError"
}

// Error satisfies the builtin error interface
func (e ClusterServiceApiValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClusterServiceApi.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClusterServiceApiValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClusterServiceApiValidationError{}

// Validate checks the field values on ThirdPartyApi with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ThirdPartyApi) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ThirdPartyApi with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ThirdPartyApiMultiError, or
// nil if none found.
func (m *ThirdPartyApi) ValidateAll() error {
	return m.validate(true)
}

func (m *ThirdPartyApi) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for HttpHost

	// no validation rules for GrpcHost

	// no validation rules for IsDebug

	// no validation rules for AccessId

	// no validation rules for AccessSecret

	// no validation rules for EncryptId

	// no validation rules for EncryptSecret

	if len(errors) > 0 {
		return ThirdPartyApiMultiError(errors)
	}

	return nil
}

// ThirdPartyApiMultiError is an error wrapping multiple validation errors
// returned by ThirdPartyApi.ValidateAll() if the designated constraints
// aren't met.
type ThirdPartyApiMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ThirdPartyApiMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ThirdPartyApiMultiError) AllErrors() []error { return m }

// ThirdPartyApiValidationError is the validation error returned by
// ThirdPartyApi.Validate if the designated constraints aren't met.
type ThirdPartyApiValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ThirdPartyApiValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ThirdPartyApiValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ThirdPartyApiValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ThirdPartyApiValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ThirdPartyApiValidationError) ErrorName() string { return "ThirdPartyApiValidationError" }

// Error satisfies the builtin error interface
func (e ThirdPartyApiValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sThirdPartyApi.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ThirdPartyApiValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ThirdPartyApiValidationError{}

// Validate checks the field values on Snowflake with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Snowflake) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Snowflake with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SnowflakeMultiError, or nil
// if none found.
func (m *Snowflake) ValidateAll() error {
	return m.validate(true)
}

func (m *Snowflake) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Enable

	// no validation rules for Endpoint

	// no validation rules for WithDiscovery

	// no validation rules for WithHttpBasicAuth

	// no validation rules for Username

	// no validation rules for Password

	if len(errors) > 0 {
		return SnowflakeMultiError(errors)
	}

	return nil
}

// SnowflakeMultiError is an error wrapping multiple validation errors returned
// by Snowflake.ValidateAll() if the designated constraints aren't met.
type SnowflakeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SnowflakeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SnowflakeMultiError) AllErrors() []error { return m }

// SnowflakeValidationError is the validation error returned by
// Snowflake.Validate if the designated constraints aren't met.
type SnowflakeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SnowflakeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SnowflakeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SnowflakeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SnowflakeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SnowflakeValidationError) ErrorName() string { return "SnowflakeValidationError" }

// Error satisfies the builtin error interface
func (e SnowflakeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSnowflake.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SnowflakeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SnowflakeValidationError{}

// Validate checks the field values on Setting_Captcha with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Setting_Captcha) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Setting_Captcha with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Setting_CaptchaMultiError, or nil if none found.
func (m *Setting_Captcha) ValidateAll() error {
	return m.validate(true)
}

func (m *Setting_Captcha) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CaptchaLen

	if all {
		switch v := interface{}(m.GetCaptchaTtl()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Setting_CaptchaValidationError{
					field:  "CaptchaTtl",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Setting_CaptchaValidationError{
					field:  "CaptchaTtl",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCaptchaTtl()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Setting_CaptchaValidationError{
				field:  "CaptchaTtl",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return Setting_CaptchaMultiError(errors)
	}

	return nil
}

// Setting_CaptchaMultiError is an error wrapping multiple validation errors
// returned by Setting_Captcha.ValidateAll() if the designated constraints
// aren't met.
type Setting_CaptchaMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Setting_CaptchaMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Setting_CaptchaMultiError) AllErrors() []error { return m }

// Setting_CaptchaValidationError is the validation error returned by
// Setting_Captcha.Validate if the designated constraints aren't met.
type Setting_CaptchaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Setting_CaptchaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Setting_CaptchaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Setting_CaptchaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Setting_CaptchaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Setting_CaptchaValidationError) ErrorName() string { return "Setting_CaptchaValidationError" }

// Error satisfies the builtin error interface
func (e Setting_CaptchaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetting_Captcha.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Setting_CaptchaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Setting_CaptchaValidationError{}

// Validate checks the field values on Setting_Login with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Setting_Login) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Setting_Login with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Setting_LoginMultiError, or
// nil if none found.
func (m *Setting_Login) ValidateAll() error {
	return m.validate(true)
}

func (m *Setting_Login) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PasswordErrSerialTimes

	if all {
		switch v := interface{}(m.GetPasswordErrSerialDuration()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Setting_LoginValidationError{
					field:  "PasswordErrSerialDuration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Setting_LoginValidationError{
					field:  "PasswordErrSerialDuration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPasswordErrSerialDuration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Setting_LoginValidationError{
				field:  "PasswordErrSerialDuration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPasswordErrLockDuration()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Setting_LoginValidationError{
					field:  "PasswordErrLockDuration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Setting_LoginValidationError{
					field:  "PasswordErrLockDuration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPasswordErrLockDuration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Setting_LoginValidationError{
				field:  "PasswordErrLockDuration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PasswordErrDailyLimitTimes

	if len(errors) > 0 {
		return Setting_LoginMultiError(errors)
	}

	return nil
}

// Setting_LoginMultiError is an error wrapping multiple validation errors
// returned by Setting_Login.ValidateAll() if the designated constraints
// aren't met.
type Setting_LoginMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Setting_LoginMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Setting_LoginMultiError) AllErrors() []error { return m }

// Setting_LoginValidationError is the validation error returned by
// Setting_Login.Validate if the designated constraints aren't met.
type Setting_LoginValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Setting_LoginValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Setting_LoginValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Setting_LoginValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Setting_LoginValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Setting_LoginValidationError) ErrorName() string { return "Setting_LoginValidationError" }

// Error satisfies the builtin error interface
func (e Setting_LoginValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetting_Login.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Setting_LoginValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Setting_LoginValidationError{}

// Validate checks the field values on Server_HTTP with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Server_HTTP) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Server_HTTP with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Server_HTTPMultiError, or
// nil if none found.
func (m *Server_HTTP) ValidateAll() error {
	return m.validate(true)
}

func (m *Server_HTTP) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Enable

	// no validation rules for Network

	if utf8.RuneCountInString(m.GetAddr()) < 1 {
		err := Server_HTTPValidationError{
			field:  "Addr",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetTimeout()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Server_HTTPValidationError{
					field:  "Timeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Server_HTTPValidationError{
					field:  "Timeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Server_HTTPValidationError{
				field:  "Timeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return Server_HTTPMultiError(errors)
	}

	return nil
}

// Server_HTTPMultiError is an error wrapping multiple validation errors
// returned by Server_HTTP.ValidateAll() if the designated constraints aren't met.
type Server_HTTPMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Server_HTTPMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Server_HTTPMultiError) AllErrors() []error { return m }

// Server_HTTPValidationError is the validation error returned by
// Server_HTTP.Validate if the designated constraints aren't met.
type Server_HTTPValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Server_HTTPValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Server_HTTPValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Server_HTTPValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Server_HTTPValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Server_HTTPValidationError) ErrorName() string { return "Server_HTTPValidationError" }

// Error satisfies the builtin error interface
func (e Server_HTTPValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServer_HTTP.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Server_HTTPValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Server_HTTPValidationError{}

// Validate checks the field values on Server_GRPC with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Server_GRPC) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Server_GRPC with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Server_GRPCMultiError, or
// nil if none found.
func (m *Server_GRPC) ValidateAll() error {
	return m.validate(true)
}

func (m *Server_GRPC) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Enable

	// no validation rules for Network

	if utf8.RuneCountInString(m.GetAddr()) < 1 {
		err := Server_GRPCValidationError{
			field:  "Addr",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetTimeout()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Server_GRPCValidationError{
					field:  "Timeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Server_GRPCValidationError{
					field:  "Timeout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Server_GRPCValidationError{
				field:  "Timeout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return Server_GRPCMultiError(errors)
	}

	return nil
}

// Server_GRPCMultiError is an error wrapping multiple validation errors
// returned by Server_GRPC.ValidateAll() if the designated constraints aren't met.
type Server_GRPCMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Server_GRPCMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Server_GRPCMultiError) AllErrors() []error { return m }

// Server_GRPCValidationError is the validation error returned by
// Server_GRPC.Validate if the designated constraints aren't met.
type Server_GRPCValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Server_GRPCValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Server_GRPCValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Server_GRPCValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Server_GRPCValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Server_GRPCValidationError) ErrorName() string { return "Server_GRPCValidationError" }

// Error satisfies the builtin error interface
func (e Server_GRPCValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServer_GRPC.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Server_GRPCValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Server_GRPCValidationError{}

// Validate checks the field values on Log_Console with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Log_Console) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Log_Console with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Log_ConsoleMultiError, or
// nil if none found.
func (m *Log_Console) ValidateAll() error {
	return m.validate(true)
}

func (m *Log_Console) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Enable

	// no validation rules for Level

	if len(errors) > 0 {
		return Log_ConsoleMultiError(errors)
	}

	return nil
}

// Log_ConsoleMultiError is an error wrapping multiple validation errors
// returned by Log_Console.ValidateAll() if the designated constraints aren't met.
type Log_ConsoleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Log_ConsoleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Log_ConsoleMultiError) AllErrors() []error { return m }

// Log_ConsoleValidationError is the validation error returned by
// Log_Console.Validate if the designated constraints aren't met.
type Log_ConsoleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Log_ConsoleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Log_ConsoleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Log_ConsoleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Log_ConsoleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Log_ConsoleValidationError) ErrorName() string { return "Log_ConsoleValidationError" }

// Error satisfies the builtin error interface
func (e Log_ConsoleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLog_Console.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Log_ConsoleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Log_ConsoleValidationError{}

// Validate checks the field values on Log_File with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Log_File) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Log_File with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Log_FileMultiError, or nil
// if none found.
func (m *Log_File) ValidateAll() error {
	return m.validate(true)
}

func (m *Log_File) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Enable

	// no validation rules for Level

	// no validation rules for Dir

	// no validation rules for Filename

	if all {
		switch v := interface{}(m.GetRotateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Log_FileValidationError{
					field:  "RotateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Log_FileValidationError{
					field:  "RotateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRotateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Log_FileValidationError{
				field:  "RotateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for RotateSize

	if all {
		switch v := interface{}(m.GetStorageAge()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Log_FileValidationError{
					field:  "StorageAge",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Log_FileValidationError{
					field:  "StorageAge",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStorageAge()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Log_FileValidationError{
				field:  "StorageAge",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for StorageCounter

	if len(errors) > 0 {
		return Log_FileMultiError(errors)
	}

	return nil
}

// Log_FileMultiError is an error wrapping multiple validation errors returned
// by Log_File.ValidateAll() if the designated constraints aren't met.
type Log_FileMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Log_FileMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Log_FileMultiError) AllErrors() []error { return m }

// Log_FileValidationError is the validation error returned by
// Log_File.Validate if the designated constraints aren't met.
type Log_FileValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Log_FileValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Log_FileValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Log_FileValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Log_FileValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Log_FileValidationError) ErrorName() string { return "Log_FileValidationError" }

// Error satisfies the builtin error interface
func (e Log_FileValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLog_File.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Log_FileValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Log_FileValidationError{}

// Validate checks the field values on Encrypt_TransferEncrypt with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Encrypt_TransferEncrypt) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Encrypt_TransferEncrypt with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Encrypt_TransferEncryptMultiError, or nil if none found.
func (m *Encrypt_TransferEncrypt) ValidateAll() error {
	return m.validate(true)
}

func (m *Encrypt_TransferEncrypt) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PublicKey

	// no validation rules for PrivateKey

	if len(errors) > 0 {
		return Encrypt_TransferEncryptMultiError(errors)
	}

	return nil
}

// Encrypt_TransferEncryptMultiError is an error wrapping multiple validation
// errors returned by Encrypt_TransferEncrypt.ValidateAll() if the designated
// constraints aren't met.
type Encrypt_TransferEncryptMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Encrypt_TransferEncryptMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Encrypt_TransferEncryptMultiError) AllErrors() []error { return m }

// Encrypt_TransferEncryptValidationError is the validation error returned by
// Encrypt_TransferEncrypt.Validate if the designated constraints aren't met.
type Encrypt_TransferEncryptValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Encrypt_TransferEncryptValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Encrypt_TransferEncryptValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Encrypt_TransferEncryptValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Encrypt_TransferEncryptValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Encrypt_TransferEncryptValidationError) ErrorName() string {
	return "Encrypt_TransferEncryptValidationError"
}

// Error satisfies the builtin error interface
func (e Encrypt_TransferEncryptValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEncrypt_TransferEncrypt.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Encrypt_TransferEncryptValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Encrypt_TransferEncryptValidationError{}

// Validate checks the field values on Encrypt_ServiceEncrypt with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Encrypt_ServiceEncrypt) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Encrypt_ServiceEncrypt with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Encrypt_ServiceEncryptMultiError, or nil if none found.
func (m *Encrypt_ServiceEncrypt) ValidateAll() error {
	return m.validate(true)
}

func (m *Encrypt_ServiceEncrypt) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PublicKey

	// no validation rules for PrivateKey

	if len(errors) > 0 {
		return Encrypt_ServiceEncryptMultiError(errors)
	}

	return nil
}

// Encrypt_ServiceEncryptMultiError is an error wrapping multiple validation
// errors returned by Encrypt_ServiceEncrypt.ValidateAll() if the designated
// constraints aren't met.
type Encrypt_ServiceEncryptMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Encrypt_ServiceEncryptMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Encrypt_ServiceEncryptMultiError) AllErrors() []error { return m }

// Encrypt_ServiceEncryptValidationError is the validation error returned by
// Encrypt_ServiceEncrypt.Validate if the designated constraints aren't met.
type Encrypt_ServiceEncryptValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Encrypt_ServiceEncryptValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Encrypt_ServiceEncryptValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Encrypt_ServiceEncryptValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Encrypt_ServiceEncryptValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Encrypt_ServiceEncryptValidationError) ErrorName() string {
	return "Encrypt_ServiceEncryptValidationError"
}

// Error satisfies the builtin error interface
func (e Encrypt_ServiceEncryptValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEncrypt_ServiceEncrypt.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Encrypt_ServiceEncryptValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Encrypt_ServiceEncryptValidationError{}

// Validate checks the field values on Encrypt_TokenEncrypt with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Encrypt_TokenEncrypt) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Encrypt_TokenEncrypt with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Encrypt_TokenEncryptMultiError, or nil if none found.
func (m *Encrypt_TokenEncrypt) ValidateAll() error {
	return m.validate(true)
}

func (m *Encrypt_TokenEncrypt) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SignKey

	// no validation rules for RefreshKey

	if len(errors) > 0 {
		return Encrypt_TokenEncryptMultiError(errors)
	}

	return nil
}

// Encrypt_TokenEncryptMultiError is an error wrapping multiple validation
// errors returned by Encrypt_TokenEncrypt.ValidateAll() if the designated
// constraints aren't met.
type Encrypt_TokenEncryptMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Encrypt_TokenEncryptMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Encrypt_TokenEncryptMultiError) AllErrors() []error { return m }

// Encrypt_TokenEncryptValidationError is the validation error returned by
// Encrypt_TokenEncrypt.Validate if the designated constraints aren't met.
type Encrypt_TokenEncryptValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Encrypt_TokenEncryptValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Encrypt_TokenEncryptValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Encrypt_TokenEncryptValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Encrypt_TokenEncryptValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Encrypt_TokenEncryptValidationError) ErrorName() string {
	return "Encrypt_TokenEncryptValidationError"
}

// Error satisfies the builtin error interface
func (e Encrypt_TokenEncryptValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEncrypt_TokenEncrypt.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Encrypt_TokenEncryptValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Encrypt_TokenEncryptValidationError{}
