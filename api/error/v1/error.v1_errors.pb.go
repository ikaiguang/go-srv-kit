// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package errorv1

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

// UNKNOWN 常规
func IsUnknown(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_UNKNOWN.String() && e.Code == 404
}

// UNKNOWN 常规
func ErrorUnknown(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ERROR_UNKNOWN.String(), fmt.Sprintf(format, args...))
}

func IsRequestFailure(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_REQUEST_FAILURE.String() && e.Code == 503
}

func ErrorRequestFailure(format string, args ...interface{}) *errors.Error {
	return errors.New(503, ERROR_REQUEST_FAILURE.String(), fmt.Sprintf(format, args...))
}

func IsRecordNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_RECORD_NOT_FOUND.String() && e.Code == 404
}

func ErrorRecordNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ERROR_RECORD_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

func IsRecordAlreadyExists(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_RECORD_ALREADY_EXISTS.String() && e.Code == 400
}

func ErrorRecordAlreadyExists(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ERROR_RECORD_ALREADY_EXISTS.String(), fmt.Sprintf(format, args...))
}

// CONTINUE Continue
func IsContinue(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_CONTINUE.String() && e.Code == 100
}

// CONTINUE Continue
func ErrorContinue(format string, args ...interface{}) *errors.Error {
	return errors.New(100, ERROR_CONTINUE.String(), fmt.Sprintf(format, args...))
}

func IsProcessing(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_PROCESSING.String() && e.Code == 102
}

func ErrorProcessing(format string, args ...interface{}) *errors.Error {
	return errors.New(102, ERROR_PROCESSING.String(), fmt.Sprintf(format, args...))
}

// OK OK
func IsOk(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_OK.String() && e.Code == 200
}

// OK OK
func ErrorOk(format string, args ...interface{}) *errors.Error {
	return errors.New(200, ERROR_OK.String(), fmt.Sprintf(format, args...))
}

func IsCreated(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_CREATED.String() && e.Code == 201
}

func ErrorCreated(format string, args ...interface{}) *errors.Error {
	return errors.New(201, ERROR_CREATED.String(), fmt.Sprintf(format, args...))
}

func IsAccepted(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_ACCEPTED.String() && e.Code == 202
}

func ErrorAccepted(format string, args ...interface{}) *errors.Error {
	return errors.New(202, ERROR_ACCEPTED.String(), fmt.Sprintf(format, args...))
}

func IsNoContent(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_NO_CONTENT.String() && e.Code == 204
}

func ErrorNoContent(format string, args ...interface{}) *errors.Error {
	return errors.New(204, ERROR_NO_CONTENT.String(), fmt.Sprintf(format, args...))
}

// MULTIPLE_CHOICES MultipleChoices
func IsMultipleChoices(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_MULTIPLE_CHOICES.String() && e.Code == 300
}

// MULTIPLE_CHOICES MultipleChoices
func ErrorMultipleChoices(format string, args ...interface{}) *errors.Error {
	return errors.New(300, ERROR_MULTIPLE_CHOICES.String(), fmt.Sprintf(format, args...))
}

// BAD_REQUEST Bad Request
func IsBadRequest(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_BAD_REQUEST.String() && e.Code == 400
}

// BAD_REQUEST Bad Request
func ErrorBadRequest(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ERROR_BAD_REQUEST.String(), fmt.Sprintf(format, args...))
}

func IsUnauthorized(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_UNAUTHORIZED.String() && e.Code == 401
}

func ErrorUnauthorized(format string, args ...interface{}) *errors.Error {
	return errors.New(401, ERROR_UNAUTHORIZED.String(), fmt.Sprintf(format, args...))
}

func IsForbidden(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_FORBIDDEN.String() && e.Code == 403
}

func ErrorForbidden(format string, args ...interface{}) *errors.Error {
	return errors.New(403, ERROR_FORBIDDEN.String(), fmt.Sprintf(format, args...))
}

func IsNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_NOT_FOUND.String() && e.Code == 404
}

func ErrorNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ERROR_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

func IsMethodNotAllowed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_METHOD_NOT_ALLOWED.String() && e.Code == 405
}

func ErrorMethodNotAllowed(format string, args ...interface{}) *errors.Error {
	return errors.New(405, ERROR_METHOD_NOT_ALLOWED.String(), fmt.Sprintf(format, args...))
}

func IsRequestTimeout(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_REQUEST_TIMEOUT.String() && e.Code == 408
}

func ErrorRequestTimeout(format string, args ...interface{}) *errors.Error {
	return errors.New(408, ERROR_REQUEST_TIMEOUT.String(), fmt.Sprintf(format, args...))
}

func IsTooManyRequests(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_TOO_MANY_REQUESTS.String() && e.Code == 429
}

func ErrorTooManyRequests(format string, args ...interface{}) *errors.Error {
	return errors.New(429, ERROR_TOO_MANY_REQUESTS.String(), fmt.Sprintf(format, args...))
}

// INTERNAL_SERVER Internal Server Error
func IsInternalServer(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_INTERNAL_SERVER.String() && e.Code == 500
}

// INTERNAL_SERVER Internal Server Error
func ErrorInternalServer(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ERROR_INTERNAL_SERVER.String(), fmt.Sprintf(format, args...))
}

func IsNotImplemented(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_NOT_IMPLEMENTED.String() && e.Code == 501
}

func ErrorNotImplemented(format string, args ...interface{}) *errors.Error {
	return errors.New(501, ERROR_NOT_IMPLEMENTED.String(), fmt.Sprintf(format, args...))
}

func IsBadGateway(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_BAD_GATEWAY.String() && e.Code == 502
}

func ErrorBadGateway(format string, args ...interface{}) *errors.Error {
	return errors.New(502, ERROR_BAD_GATEWAY.String(), fmt.Sprintf(format, args...))
}

func IsServiceUnavailable(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_SERVICE_UNAVAILABLE.String() && e.Code == 503
}

func ErrorServiceUnavailable(format string, args ...interface{}) *errors.Error {
	return errors.New(503, ERROR_SERVICE_UNAVAILABLE.String(), fmt.Sprintf(format, args...))
}

func IsGatewayTimeout(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_GATEWAY_TIMEOUT.String() && e.Code == 504
}

func ErrorGatewayTimeout(format string, args ...interface{}) *errors.Error {
	return errors.New(504, ERROR_GATEWAY_TIMEOUT.String(), fmt.Sprintf(format, args...))
}
