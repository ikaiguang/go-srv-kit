// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.4
// source: api/example/v1/services/example.service.v1.proto

package exampleservicev1

import (
	context "context"
	resources "github.com/ikaiguang/go-srv-kit/api/example/v1/resources"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SrvExampleClient is the client API for SrvExample service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SrvExampleClient interface {
	// Example 例子
	Example(ctx context.Context, in *resources.ExampleReq, opts ...grpc.CallOption) (*resources.ExampleResp, error)
}

type srvExampleClient struct {
	cc grpc.ClientConnInterface
}

func NewSrvExampleClient(cc grpc.ClientConnInterface) SrvExampleClient {
	return &srvExampleClient{cc}
}

func (c *srvExampleClient) Example(ctx context.Context, in *resources.ExampleReq, opts ...grpc.CallOption) (*resources.ExampleResp, error) {
	out := new(resources.ExampleResp)
	err := c.cc.Invoke(ctx, "/kit.api.exampleservicev1.SrvExample/Example", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SrvExampleServer is the server API for SrvExample service.
// All implementations must embed UnimplementedSrvExampleServer
// for forward compatibility
type SrvExampleServer interface {
	// Example 例子
	Example(context.Context, *resources.ExampleReq) (*resources.ExampleResp, error)
	mustEmbedUnimplementedSrvExampleServer()
}

// UnimplementedSrvExampleServer must be embedded to have forward compatible implementations.
type UnimplementedSrvExampleServer struct {
}

func (UnimplementedSrvExampleServer) Example(context.Context, *resources.ExampleReq) (*resources.ExampleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Example not implemented")
}
func (UnimplementedSrvExampleServer) mustEmbedUnimplementedSrvExampleServer() {}

// UnsafeSrvExampleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SrvExampleServer will
// result in compilation errors.
type UnsafeSrvExampleServer interface {
	mustEmbedUnimplementedSrvExampleServer()
}

func RegisterSrvExampleServer(s grpc.ServiceRegistrar, srv SrvExampleServer) {
	s.RegisterService(&SrvExample_ServiceDesc, srv)
}

func _SrvExample_Example_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.ExampleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SrvExampleServer).Example(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kit.api.exampleservicev1.SrvExample/Example",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SrvExampleServer).Example(ctx, req.(*resources.ExampleReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SrvExample_ServiceDesc is the grpc.ServiceDesc for SrvExample service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SrvExample_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kit.api.exampleservicev1.SrvExample",
	HandlerType: (*SrvExampleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Example",
			Handler:    _SrvExample_Example_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/example/v1/services/example.service.v1.proto",
}
