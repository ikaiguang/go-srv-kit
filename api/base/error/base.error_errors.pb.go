// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package baseerror

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

// STATUS_UNKNOWN 常规
func IsStatusUnknown(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_STATUS_UNKNOWN.String() && e.Code == 404
}

// STATUS_UNKNOWN 常规
func ErrorStatusUnknown(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ERROR_STATUS_UNKNOWN.String(), fmt.Sprintf(format, args...))
}

func IsStatusRequestFailure(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_STATUS_REQUEST_FAILURE.String() && e.Code == 503
}

func ErrorStatusRequestFailure(format string, args ...interface{}) *errors.Error {
	return errors.New(503, ERROR_STATUS_REQUEST_FAILURE.String(), fmt.Sprintf(format, args...))
}

func IsStatusRecordAlreadyExists(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_STATUS_RECORD_ALREADY_EXISTS.String() && e.Code == 400
}

func ErrorStatusRecordAlreadyExists(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ERROR_STATUS_RECORD_ALREADY_EXISTS.String(), fmt.Sprintf(format, args...))
}

// STATUS_CONTINUE Continue
func IsStatusContinue(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_STATUS_CONTINUE.String() && e.Code == 100
}

// STATUS_CONTINUE Continue
func ErrorStatusContinue(format string, args ...interface{}) *errors.Error {
	return errors.New(100, ERROR_STATUS_CONTINUE.String(), fmt.Sprintf(format, args...))
}

func IsStatusProcessing(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_STATUS_PROCESSING.String() && e.Code == 102
}

func ErrorStatusProcessing(format string, args ...interface{}) *errors.Error {
	return errors.New(102, ERROR_STATUS_PROCESSING.String(), fmt.Sprintf(format, args...))
}

// STATUS_OK OK
func IsStatusOk(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_STATUS_OK.String() && e.Code == 200
}

// STATUS_OK OK
func ErrorStatusOk(format string, args ...interface{}) *errors.Error {
	return errors.New(200, ERROR_STATUS_OK.String(), fmt.Sprintf(format, args...))
}

func IsStatusCreated(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_STATUS_CREATED.String() && e.Code == 201
}

func ErrorStatusCreated(format string, args ...interface{}) *errors.Error {
	return errors.New(201, ERROR_STATUS_CREATED.String(), fmt.Sprintf(format, args...))
}

func IsStatusAccepted(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_STATUS_ACCEPTED.String() && e.Code == 202
}

func ErrorStatusAccepted(format string, args ...interface{}) *errors.Error {
	return errors.New(202, ERROR_STATUS_ACCEPTED.String(), fmt.Sprintf(format, args...))
}

func IsStatusNoContent(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_STATUS_NO_CONTENT.String() && e.Code == 204
}

func ErrorStatusNoContent(format string, args ...interface{}) *errors.Error {
	return errors.New(204, ERROR_STATUS_NO_CONTENT.String(), fmt.Sprintf(format, args...))
}

// MULTIPLE_CHOICES MultipleChoices
func IsStatusMultipleChoices(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_STATUS_MULTIPLE_CHOICES.String() && e.Code == 300
}

// MULTIPLE_CHOICES MultipleChoices
func ErrorStatusMultipleChoices(format string, args ...interface{}) *errors.Error {
	return errors.New(300, ERROR_STATUS_MULTIPLE_CHOICES.String(), fmt.Sprintf(format, args...))
}

// STATUS_BAD_REQUEST Bad Request
func IsStatusBadRequest(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_STATUS_BAD_REQUEST.String() && e.Code == 400
}

// STATUS_BAD_REQUEST Bad Request
func ErrorStatusBadRequest(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ERROR_STATUS_BAD_REQUEST.String(), fmt.Sprintf(format, args...))
}

func IsStatusUnauthorized(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_STATUS_UNAUTHORIZED.String() && e.Code == 401
}

func ErrorStatusUnauthorized(format string, args ...interface{}) *errors.Error {
	return errors.New(401, ERROR_STATUS_UNAUTHORIZED.String(), fmt.Sprintf(format, args...))
}

func IsStatusForbidden(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_STATUS_FORBIDDEN.String() && e.Code == 403
}

func ErrorStatusForbidden(format string, args ...interface{}) *errors.Error {
	return errors.New(403, ERROR_STATUS_FORBIDDEN.String(), fmt.Sprintf(format, args...))
}

func IsStatusNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_STATUS_NOT_FOUND.String() && e.Code == 404
}

func ErrorStatusNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ERROR_STATUS_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

func IsStatusMethodNotAllowed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_STATUS_METHOD_NOT_ALLOWED.String() && e.Code == 405
}

func ErrorStatusMethodNotAllowed(format string, args ...interface{}) *errors.Error {
	return errors.New(405, ERROR_STATUS_METHOD_NOT_ALLOWED.String(), fmt.Sprintf(format, args...))
}

func IsStatusRequestTimeout(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_STATUS_REQUEST_TIMEOUT.String() && e.Code == 408
}

func ErrorStatusRequestTimeout(format string, args ...interface{}) *errors.Error {
	return errors.New(408, ERROR_STATUS_REQUEST_TIMEOUT.String(), fmt.Sprintf(format, args...))
}

func IsStatusTooManyRequests(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_STATUS_TOO_MANY_REQUESTS.String() && e.Code == 429
}

func ErrorStatusTooManyRequests(format string, args ...interface{}) *errors.Error {
	return errors.New(429, ERROR_STATUS_TOO_MANY_REQUESTS.String(), fmt.Sprintf(format, args...))
}

// STATUS_INTERNAL_SERVER Internal Server Error
func IsStatusInternalServer(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_STATUS_INTERNAL_SERVER.String() && e.Code == 500
}

// STATUS_INTERNAL_SERVER Internal Server Error
func ErrorStatusInternalServer(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ERROR_STATUS_INTERNAL_SERVER.String(), fmt.Sprintf(format, args...))
}

func IsStatusNotImplemented(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_STATUS_NOT_IMPLEMENTED.String() && e.Code == 501
}

func ErrorStatusNotImplemented(format string, args ...interface{}) *errors.Error {
	return errors.New(501, ERROR_STATUS_NOT_IMPLEMENTED.String(), fmt.Sprintf(format, args...))
}

func IsStatusBadGateway(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_STATUS_BAD_GATEWAY.String() && e.Code == 502
}

func ErrorStatusBadGateway(format string, args ...interface{}) *errors.Error {
	return errors.New(502, ERROR_STATUS_BAD_GATEWAY.String(), fmt.Sprintf(format, args...))
}

func IsStatusServiceUnavailable(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_STATUS_SERVICE_UNAVAILABLE.String() && e.Code == 503
}

func ErrorStatusServiceUnavailable(format string, args ...interface{}) *errors.Error {
	return errors.New(503, ERROR_STATUS_SERVICE_UNAVAILABLE.String(), fmt.Sprintf(format, args...))
}

func IsStatusGatewayTimeout(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ERROR_STATUS_GATEWAY_TIMEOUT.String() && e.Code == 504
}

func ErrorStatusGatewayTimeout(format string, args ...interface{}) *errors.Error {
	return errors.New(504, ERROR_STATUS_GATEWAY_TIMEOUT.String(), fmt.Sprintf(format, args...))
}
